using Core;

using Directx12Impl;

using GraphicsAPI.Descriptions;
using GraphicsAPI.Enums;

using Passes;
using Passes.Enums;

using Resources.Enums;

using Silk.NET.Maths;
using Silk.NET.Windowing;

using System.Numerics;
/// <summary>
/// –ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RenderGraph —Å DirectX12Impl —á–µ—Ä–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏.
/// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –ø–∞—Å—Å–æ–≤ –∏–∑ –ø–∞–∫–µ—Ç–∞ Passes –∏ —Å–æ–∑–¥–∞–Ω–∏–µ 
/// –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ render pipeline —á–µ—Ä–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ GraphicsAPI.
/// </summary>
public unsafe class RenderGraphDX12Example: IDisposable
{
  private DX12GraphicsDevice _device;
  private RenderGraph _renderGraph;
  private DX12SwapChain _swapChain;
  private IWindow _window;

  private GeometryPass _geometryPass;
  private BlurPass _blurPass;
  private ClearPass _clearPass;
  private SimpleTrianglePass _trianglePass;

  private ToneMappingPass _toneMappingPass;

  private bool _isRunning = true;
  private readonly uint _windowWidth = 1280;
  private readonly uint _windowHeight = 720;

  private ResourceHandle _backBufferHandle;

  public RenderGraphDX12Example()
  {
    InitializeWindow();
    InitializeGraphicsDevice();
    InitializeRenderGraph();
  }

  private void InitializeWindow()
  {
    _window = Window.Create(new WindowOptions
    {
      API = Silk.NET.Windowing.GraphicsAPI.Default,
      Size = new Vector2D<int>((int)_windowWidth, (int)_windowHeight),
      Title = "RenderGraph + DirectX12 Example",
      IsVisible = true,
      Position = new Vector2D<int>(100, 100),
    });

    _window.Load += OnWindowLoad;
    _window.Render += OnWindowRender;
    _window.Closing += OnWindowClosing;
    _window.Resize += OnWindowResize;
  }

  private void InitializeGraphicsDevice()
  {
    Console.WriteLine("üöÄ Initializing DirectX12 Graphics Device...");

    _device = new DX12GraphicsDevice(true);

    Console.WriteLine($"‚úÖ Graphics Device Created:");
    Console.WriteLine($"   Name: {_device.Name}");
    Console.WriteLine($"   API: {_device.API}");
    Console.WriteLine($"   Max Texture Size: {_device.Capabilities.MaxTexture2DSize}");
  }

  private void InitializeRenderGraph()
  {
    Console.WriteLine("üìä Creating Render Graph...");

    _renderGraph = new RenderGraph(_device);

    Console.WriteLine("‚úÖ Render Graph created successfully!");
  }

  /// <summary>
  /// –°–æ–∑–¥–∞–µ—Ç placeholder –¥–ª—è back buffer, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–º –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  /// </summary>
  private void CreateBackBufferPlaceholder()
  {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–ª—É–∂–∏—Ç—å placeholder –¥–ª—è back buffer
    var builder = new RenderGraphBuilder(_renderGraph.ResourceManager);
    _backBufferHandle = builder.CreateColorTarget(
        "BackBufferPlaceholder",
        _windowWidth,
        _windowHeight,
        TextureFormat.R8G8B8A8_UNORM
    );

    Console.WriteLine($"‚úÖ Created back buffer placeholder: {_backBufferHandle}");
  }

  /// <summary>
  /// –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ render passes
  /// </summary>
  private void CreateRenderPasses()
  {
    Console.WriteLine("üé® Creating Render Passes...");

    CreateBackBufferPlaceholder();

    _clearPass = new ClearPass("ScreenClear");
    _clearPass.SetRenderTarget(_backBufferHandle);


    _geometryPass = new GeometryPass
    {
      ViewportWidth = _windowWidth,
      ViewportHeight = _windowHeight,
      ClearColor = true,
      ClearDepth = true,
      ClearColorValue = new Vector4(0.1f, 0.2f, 0.4f, 1.0f),
      ClearDepthValue = 1.0f
    };

    _trianglePass = new SimpleTrianglePass("RenderTriangle");
    _trianglePass.SetRenderTarget(_backBufferHandle);

    _blurPass = new BlurPass
    {
      BlurRadius = 8.0f,
      BlurSigma = 2.5f,
      Quality = BlurQuality.High,
      BlurDirection = BlurDirection.Both
    };

    _toneMappingPass = new ToneMappingPass("ToneMapping")
    {
      Exposure = 1.0f,
      Gamma = 2.2f,
      TonemappingMode = TonemappingMode.ACES
    };

    _toneMappingPass.SetOutputTarget(_backBufferHandle);

    Console.WriteLine($"‚úÖ Created {5} render passes");
  }

  /// <summary>
  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø–∞—Å—Å–∞–º–∏ –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
  /// </summary>
  private void SetupPassDependenciesAndResources()
  {
    Console.WriteLine("üîó Setting up pass dependencies and resource connections...");

    _trianglePass.AddDependency(_clearPass);
    _geometryPass.AddDependency(_trianglePass);
    _blurPass.AddDependency(_geometryPass);
    _toneMappingPass.AddDependency(_blurPass);

    SetupResourceConnections();

    Console.WriteLine("‚úÖ Dependencies and resource connections configured");
  }

  /// <summary>
  /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–≤—è–∑–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–∂–¥—É –ø–∞—Å—Å–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫–∏
  /// </summary>
  private void SetupResourceConnections()
  {
    _geometryPass.OnPassSetup += (pass) =>
    {
      Console.WriteLine("üîó Connecting GeometryPass.ColorTarget -> BlurPass.InputTexture");
      _blurPass.InputTexture = _geometryPass.ColorTarget;
    };

    _blurPass.OnPassSetup += (pass) =>
    {
      Console.WriteLine("üîó Connecting BlurPass.OutputTexture -> ToneMappingPass.InputTexture");
      _toneMappingPass.InputTexture = _blurPass.OutputTexture;
    };
  }

  /// <summary>
  /// –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø–∞—Å—Å—ã –≤ render graph
  /// </summary>
  private void AddPassesToRenderGraph()
  {
    Console.WriteLine("üìã Adding passes to render graph...");

    _renderGraph.AddPass(_clearPass);
    _renderGraph.AddPass(_geometryPass);
    _renderGraph.AddPass(_trianglePass);
    _renderGraph.AddPass(_blurPass);
    _renderGraph.AddPass(_toneMappingPass);

    var passCount = _renderGraph.Passes.Count;
    Console.WriteLine($"‚úÖ Added {passCount} passes to render graph");

    foreach(var pass in _renderGraph.Passes)
    {
      Console.WriteLine($"   ‚Ä¢ {pass.Name} (Category: {pass.Category}, Priority: {pass.Priority})");
    }
  }

  private void OnWindowLoad()
  {
    Console.WriteLine("üèóÔ∏è Window loaded, setting up render pipeline...");

    try
    {
      CreateSwapChain();

      CreateRenderPasses();
      SetupPassDependenciesAndResources();
      AddPassesToRenderGraph();

      CompileRenderGraph();

      Console.WriteLine("üéâ Render pipeline setup completed successfully!");
      Console.WriteLine("üöÄ Starting render loop...");
    }
    catch(Exception ex)
    {
      Console.WriteLine($"‚ùå Error during initialization: {ex.Message}");
      Console.WriteLine($"Stack trace: {ex.StackTrace}");
      _isRunning = false;
    }
  }

  private void OnWindowRender(double deltaTime)
  {
    if(!_isRunning)
      return;

    try
    {
      ExecuteRenderFrame(deltaTime);
    }
    catch(Exception ex)
    {
      Console.WriteLine($"‚ùå Render error: {ex.Message}");
      // –í production –∫–æ–¥–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å recovery logic
    }
  }

  private void OnWindowClosing()
  {
    Console.WriteLine("üëã Shutting down application...");
    _isRunning = false;
    Dispose();
  }

  private void OnWindowResize(Vector2D<int> newSize)
  {
    if(newSize.X <= 0 || newSize.Y <= 0)
      return;

    Console.WriteLine($"üîÑ Window resized to {newSize.X}x{newSize.Y}");

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å SwapChain –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Å—Å—ã
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ª–æ–≥–∏–∫—É
  }

  private void CreateSwapChain()
  {
    Console.WriteLine("üñºÔ∏è Creating SwapChain...");

    var swapChainDesc = new SwapChainDescription
    {
      Width = _windowWidth,
      Height = _windowHeight,
      Format = TextureFormat.R8G8B8A8_UNORM,
      BufferCount = 3,
      SampleCount = 1,
      SwapEffect = SwapEffect.FlipDiscard
    };

    _swapChain = _device.CreateSwapChain(swapChainDesc, _window.Native.DXHandle.GetValueOrDefault()) as DX12SwapChain;

    Console.WriteLine("‚úÖ SwapChain created successfully");
  }

  private void CompileRenderGraph()
  {
    Console.WriteLine("‚öôÔ∏è Compiling render graph...");

    _renderGraph.Compile();

    Console.WriteLine("‚úÖ Render graph compiled successfully!");

    DisplayExecutionOrder();
  }

  private void DisplayExecutionOrder()
  {
    var executionOrder = _renderGraph.ExecutionOrder;
    Console.WriteLine($"üìù Execution order ({executionOrder.Count} passes):");

    for(int i = 0; i < executionOrder.Count; i++)
    {
      var pass = executionOrder[i];
      Console.WriteLine($"   {i + 1}. {pass.Name}");
    }
  }

  /// <summary>
  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ —á–µ—Ä–µ–∑ RenderGraph
  /// </summary>
  private void ExecuteRenderFrame(double deltaTime)
  {
    var backBuffer = _swapChain.GetCurrentBackBuffer();

    var builder = new RenderGraphBuilder(_renderGraph.ResourceManager);
    var backBufferHandle = builder.ImportTexture("BackBuffer", backBuffer);

    SetupBackBufferTargets(backBufferHandle);

    UpdateFrameData(deltaTime);

    using var commandBuffer = _device.CreateCommandBuffer(
        CommandBufferType.Direct,
        CommandBufferExecutionMode.Immediate
    );

    _renderGraph.Execute(commandBuffer);

    _swapChain.Present(1);
  }

  /// <summary>
  /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç back buffer –∫–∞–∫ render target –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Å—Å–æ–≤
  /// </summary>
  private void SetupBackBufferTargets(ResourceHandle backBufferHandle)
  {
    _clearPass.SetRenderTarget(backBufferHandle);

    _trianglePass.SetRenderTarget(backBufferHandle);

    _toneMappingPass.SetOutputTarget(backBufferHandle);

    Console.WriteLine($"üîó Updated render targets with BackBuffer: {backBufferHandle}");

  }

  /// <summary>
  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Å—Å–æ–≤
  /// </summary>
  private void UpdateFrameData(double deltaTime)
  {
    var frameData = _renderGraph.FrameData;

    frameData.DeltaTime = (float)deltaTime;
    frameData.TotalTime += (float)deltaTime;
    frameData.FrameIndex++;

    frameData.ScreenWidth = _windowWidth;
    frameData.ScreenHeight = _windowHeight;

    UpdateCameraData(frameData);
  }

  /// <summary>
  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã
  /// </summary>
  private void UpdateCameraData(FrameData frameData)
  {
    var time = frameData.TotalTime;
    var cameraDistance = 5.0f;

    var cameraPos = new Vector3(
        MathF.Sin(time * 0.5f) * cameraDistance,
        2.0f,
        MathF.Cos(time * 0.5f) * cameraDistance
    );

    var viewMatrix = Matrix4x4.CreateLookAt(cameraPos, Vector3.Zero, Vector3.UnitY);
    var projMatrix = Matrix4x4.CreatePerspectiveFieldOfView(
        MathF.PI / 4.0f,
        (float)_windowWidth / _windowHeight,
        0.1f,
        100.0f
    );

    frameData.ViewMatrix = viewMatrix;
    frameData.ProjectionMatrix = projMatrix;
  }

  /// <summary>
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  /// </summary>
  public void Run()
  {
    Console.WriteLine("üéÆ Starting RenderGraph + DirectX12 Example Application...");
    _window.Run();
  }

  /// <summary>
  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  /// </summary>
  public void Stop()
  {
    _isRunning = false;
    _window?.Close();
  }

  public void Dispose()
  {
    Console.WriteLine("üßπ Disposing resources...");

    _renderGraph?.Dispose();
    _swapChain?.Dispose();
    _device?.Dispose();
    _window?.Dispose();

    Console.WriteLine("‚úÖ All resources disposed successfully");
  }
}