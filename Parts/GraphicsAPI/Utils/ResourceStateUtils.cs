using GraphicsAPI.Enums;

using Resources.Enums;

namespace GraphicsAPI.Utils;

/// <summary>
/// ??????? ??? ?????? ? ??????????? ????????
/// </summary>
public static class ResourceStateUtils
{
  /// <summary>
  /// ????????? ????????????? ????????? (????? ?? ?? ?????????????)
  /// </summary>
  public static bool AreStatesCompatible(ResourceState _state1, ResourceState _state2)
  {
    // ????????? ????????? ????? ???????????? ????????????
    var readOnlyStates = ResourceState.VertexAndConstantBuffer |
                        ResourceState.IndexBuffer |
                        ResourceState.ShaderResource |
                        ResourceState.IndirectArgument |
                        ResourceState.CopySource;

    // ???? ??? ????????? ?????? ??? ??????, ??? ??????????
    if((_state1 & readOnlyStates) == _state1 && (_state2 & readOnlyStates) == _state2)
      return true;

    // Common ????????? ?????????? ? ???????????? read-only ?????????
    if(_state1 == ResourceState.Common || _state2 == ResourceState.Common)
      return true;

    return _state1 == _state2;
  }

  /// <summary>
  /// ????????? ???????? ?? ????????? ?????? ??? ??????
  /// </summary>
  public static bool IsReadOnlyState(ResourceState _state)
  {
    var readOnlyStates = ResourceState.VertexAndConstantBuffer |
                        ResourceState.IndexBuffer |
                        ResourceState.ShaderResource |
                        ResourceState.IndirectArgument |
                        ResourceState.CopySource;

    return (_state & readOnlyStates) == _state;
  }

  /// <summary>
  /// ???????? ????????? ????????? ??? ??????? ?? ?????? ??? ?????????????
  /// </summary>
  public static ResourceState GetInitialState(BindFlags _bindFlags, ResourceUsage _usage)
  {
    if(_usage == ResourceUsage.Dynamic)
      return ResourceState.GenericRead;

    if(_usage == ResourceUsage.Staging)
      return ResourceState.CopyDest;

    if((_bindFlags & BindFlags.DepthStencil) != 0)
      return ResourceState.DepthWrite;

    if((_bindFlags & BindFlags.RenderTarget) != 0)
      return ResourceState.RenderTarget;

    return ResourceState.Common;
  }
}