@startuml RenderGraph

class RenderGraph {
  +AddPass(name, setup, execute)
  +Compile() : CompiledRenderGraph
  -passes : List<RenderPass>
}

class RenderPass {
  +Name : string
  +Setup(RenderGraphContext)
  +Execute(RenderGraphContext)
  -reads : List<ResourceHandle>
  -writes : List<ResourceHandle>
}

class RenderGraphContext {
  +Read(ResourceHandle)
  +Write(ResourceHandle)
  +CreateTexture(desc) : ResourceHandle
}

class ResourceHandle {
  +Id : int
  +Desc : IResourceDesc
}

interface IResourceDesc
class TextureDesc implements IResourceDesc
class BufferDesc implements IResourceDesc

class CompiledRenderGraph {
  +Execute()
  -passes : List<CompiledRenderPass>
  -resources : Dictionary<ResourceHandle, PhysicalResourceId>
}

class CompiledRenderPass {
  +Execute()
  -resourceStates : Dictionary<ResourceHandle, ResourceState>
}

class PhysicalResourceId {
  +Id : int
}

class ResourceState

RenderGraph --> RenderPass : contains
RenderPass --> RenderGraphContext : uses
RenderGraphContext --> ResourceHandle : creates/uses
ResourceHandle --> IResourceDesc
IResourceDesc <|-- TextureDesc
IResourceDesc <|-- BufferDesc
RenderGraph --> CompiledRenderGraph : compiles to
CompiledRenderGraph --> CompiledRenderPass : contains
CompiledRenderGraph --> PhysicalResourceId : allocates
CompiledRenderPass --> ResourceHandle : uses
CompiledRenderPass --> ResourceState : uses

@enduml