@startuml
!define LIGHTBLUE #ADD8E6
!define LIGHTGREEN #90EE90
!define LIGHTPINK #FFB6C1
!define LIGHTYELLOW #FFFFE0
!define LIGHTGRAY #D3D3D3

package Core {

  ' Core abstract classes and main components
  abstract class RenderPass {
    - p_inputs: List<ResourceHandle>
    - p_outputs: List<ResourceHandle>
    - p_dependencies: List<RenderPass>
    - p_enabled: bool
    - p_executionOrder: int
    
    + Name: string {get}
    + Enabled: bool {get; set}
    + Inputs: IReadOnlyList<ResourceHandle> {get}
    + Outputs: IReadOnlyList<ResourceHandle> {get}
    + Dependencies: IReadOnlyList<RenderPass> {get}
    + ExecutionOrder: int {get; set}
    + AlwaysExecute: bool {get; set}
    + Category: PassCategory {get; set}
    + Priority: PassPriority {get; set}
    + Statistics: PassStatistics {get}
    
    + event OnPassSetup: Action<RenderPass>
    + event OnPassExecuted: Action<RenderPass>
    + event OnPassError: Action<RenderPass, Exception>
    
    + {abstract} Setup(RenderGraphBuilder): void
    + {abstract} Execute(RenderPassContext): void
    + CanExecute(): bool
    + AddDependency(RenderPass): void
    + RemoveDependency(RenderPass): void
    + Validate(out string): bool
    + Dispose(): void
    
    - InternalSetup(RenderGraphBuilder): void
    - InternalExecute(RenderPassContext): void
    - AddInput(ResourceHandle): void
    - AddOutput(ResourceHandle): void
    - ClearInputsOutputs(): void
  }

  class RenderGraph {
    - p_passes: List<RenderPass>
    - p_resourceManager: ResourceManager
    - p_dependencyResolver: DependencyResolver
    - p_device: IGraphicsDevice
    - p_builder: RenderGraphBuilder
    - p_frameData: FrameData
    - p_compiled: bool
    - p_disposed: bool
    - p_executionOrder: List<RenderPass>
    - p_passContexts: Dictionary<RenderPass, RenderPassContext>
    
    + IsCompiled: bool {get}
    + Passes: IReadOnlyList<RenderPass> {get}
    + ExecutionOrder: IReadOnlyList<RenderPass> {get}
    + FrameData: FrameData {get}
    
    + AddPass<T>(T): void where T : RenderPass
    + RemovePass(RenderPass): void
    + Compile(): void
    + Execute(CommandBuffer): void
    + Reset(): void
    + UpdateFrameData(float, uint, uint): void
    + SetViewMatrix(Matrix4x4): void
    + SetProjectionMatrix(Matrix4x4): void
    + SetCameraPosition(Vector3): void
    + ImportTexture(string, ITexture): ResourceHandle
    + ImportBuffer(string, IBuffer): ResourceHandle
    + GetNamedResource(string): ResourceHandle
    + HasNamedResource(string): bool
    + GetMemoryUsage(): MemoryUsageInfo
    + GetStatistics(): RenderGraphStatistics
    + Dispose(): void
  }

  class RenderGraphBuilder {
    - p_resourceManager: ResourceManager
    - p_resourceUsages: Dictionary<ResourceHandle, List<ResourceUsageInfo>>
    - p_namedResources: Dictionary<string, ResourceHandle>
    - p_currentPassUsages: List<ResourceUsageInfo>
    - p_currentPass: RenderPass
    
    + CreateTexture(string, TextureDescription): ResourceHandle
    + CreateBuffer(string, BufferDescription): ResourceHandle
    + CreateColorTarget(string, uint, uint, TextureFormat): ResourceHandle
    + CreateDepthTarget(string, uint, uint, TextureFormat): ResourceHandle
    + CreateConstantBuffer(string, uint): ResourceHandle
    + ReadTexture(ResourceHandle): void
    + WriteTexture(ResourceHandle): void
    + WriteTextureAsDepth(ResourceHandle): void
    + ReadBuffer(ResourceHandle): void
    + WriteBuffer(ResourceHandle): void
    + ImportTexture(string, ITexture): ResourceHandle
    + ImportBuffer(string, IBuffer): ResourceHandle
    + SetResourceLifetime(ResourceHandle, ResourceLifetime): void
    + GetNamedResource(string): ResourceHandle
    + HasNamedResource(string): bool
    + ValidateResourceUsages(): void
    + Clear(): void
  }

  class RenderPassContext {
    + CommandBuffer: CommandBuffer {get; set}
    + Resources: ResourceManager {get; set}
    + FrameData: FrameData {get; set}
    + PassIndex: int {get; set}
    + ViewportWidth: uint {get; set}
    + ViewportHeight: uint {get; set}
    
    + GetTexture(ResourceHandle): ITexture
    + GetBuffer(ResourceHandle): IBuffer
    + GetTextureView(ResourceHandle, TextureViewType): ITextureView
    + GetBufferView(ResourceHandle, BufferViewType): IBufferView
    + SetViewport(float, float, float, float, float, float): void
    + SetFullScreenViewport(): void
  }

  class DependencyResolver {
    - p_passGraph: DirectedGraph<RenderPass>
    - p_resourceDependencies: Dictionary<ResourceHandle, List<RenderPass>>
    
    + AddNode(RenderPass): void
    + AddEdge(RenderPass, RenderPass): void
    + BuildDependencyGraph(List<RenderPass>): void
    + TopologicalSort(): List<RenderPass>
    + DetectCycles(): List<RenderPass>
    + CullUnusedPasses(): List<RenderPass>
    + ValidateDependencies(): bool
    + GetCriticalPath(): List<RenderPass>
    + Clear(): void
  }

  class FrameData {
    - p_globalConstants: Dictionary<string, object>
    
    + FrameIndex: ulong {get; set}
    + DeltaTime: float {get; set}
    + ViewMatrix: Matrix4x4 {get; set}
    + ProjectionMatrix: Matrix4x4 {get; set}
    + ViewProjectionMatrix: Matrix4x4 {get}
    + CameraPosition: Vector3 {get; set}
    + ScreenWidth: uint {get; set}
    + ScreenHeight: uint {get; set}
    
    + GetConstantBuffer<T>(): T where T : struct
    + SetConstantBuffer<T>(T): void where T : struct
    + SetGlobalConstants(string, object): void
    + GetGlobalConstant<T>(string): T
    + UpdateMatrices(): void
    + Reset(): void
  }

  class PassStatistics {
    - p_setupStartTime: DateTime
    - p_executionStartTime: DateTime
    - p_errors: List<Exception>
    
    + LastSetupTime: TimeSpan {get}
    + LastExecutionTime: TimeSpan {get}
    + TotalSetupTime: TimeSpan {get}
    + TotalExecutionTime: TimeSpan {get}
    + SetupCount: int {get}
    + ExecutionCount: int {get}
    + ErrorCount: int {get}
    + WasExecutedThisFrame: bool {get}
    + CurrentFrameNumber: int {get}
    + AverageSetupTime: TimeSpan {get}
    + AverageExecutionTime: TimeSpan {get}
    
    + StartSetup(): void
    + EndSetup(): void
    + StartExecution(): void
    + EndExecution(): void
    + MarkExecutedThisFrame(): void
    + StartFrame(): void
    + EndFrame(): void
    + RecordError(Exception): void
    + GetErrors(): IReadOnlyList<Exception>
    + GetLastError(): Exception
    + Reset(): void
    + ClearErrors(): void
  }

  class ResourceUsageInfo {
    + Handle: ResourceHandle {get; set}
    + AccessType: ResourceAccessType {get; set}
    + Usage: ResourceUsage {get; set}
    + State: ResourceState {get; set}
    + PassName: string {get; set}
    
    + IsRead(): bool
    + IsWrite(): bool
    + ConflictsWith(ResourceUsageInfo): bool
    + ToString(): string
    + Equals(object): bool
    + GetHashCode(): int
  }

  class RenderGraphStatistics {
    + TotalPasses: int
    + EnabledPasses: int
    + DisabledPasses: int
    + TotalResources: int
    + MemoryUsage: MemoryUsageInfo
    + IsCompiled: bool
    + LastFrameIndex: ulong
    + PassUtilization: float {get}
  }

  ' Enumerations
  enum PassCategory <<enumeration>> {
    Initialization
    GeometrySetup
    ShadowMapping
    Rendering
    PostProcessing
    UI
    Debug
    Finalization
  }

  enum PassPriority <<enumeration>> {
    Lowest = 0
    Low = 25
    Normal = 50
    High = 75
    Highest = 100
    Critical = 200
  }

  enum ResourceAccessType <<enumeration>> {
    Read
    Write
    ReadWrite
  }

  ' Extensions (Static classes)
  class RenderPassExtensions <<static>> {
    + {static} IsPostProcessPass(RenderPass): bool
    + {static} IsRenderingPass(RenderPass): bool
    + {static} IsHighPriority(RenderPass): bool
    + {static} SetCategory(RenderPass, PassCategory): void
    + {static} SetPriority(RenderPass, PassPriority): void
    + {static} RequiresPass(RenderPass, RenderPass): void
    + {static} MakeOptional(RenderPass): void
    + {static} MakeRequired(RenderPass): void
  }

}

' External dependencies
class ResourceManager <<external>>
class ResourceHandle <<external>>
class CommandBuffer <<external>>
interface IGraphicsDevice <<external>>
class DirectedGraph<T> <<external>>
class MemoryUsageInfo <<external>>

' Relationships
RenderGraph *-- RenderPass : contains
RenderGraph *-- ResourceManager
RenderGraph *-- DependencyResolver
RenderGraph *-- RenderGraphBuilder
RenderGraph *-- FrameData
RenderGraph --> IGraphicsDevice

RenderPass *-- PassStatistics
RenderPass --> PassCategory
RenderPass --> PassPriority
RenderPass --> ResourceHandle : uses

RenderGraphBuilder *-- ResourceManager
RenderGraphBuilder *-- ResourceUsageInfo : creates
RenderGraphBuilder --> ResourceHandle : creates

RenderPassContext --> ResourceManager
RenderPassContext --> FrameData
RenderPassContext --> CommandBuffer

DependencyResolver *-- DirectedGraph

ResourceUsageInfo --> ResourceAccessType
ResourceUsageInfo --> ResourceHandle

PassStatistics --> Exception : records

RenderGraphStatistics --> MemoryUsageInfo

' Extension relationships
RenderPassExtensions ..> RenderPass : extends
RenderPassExtensions ..> PassCategory : uses
RenderPassExtensions ..> PassPriority : uses

' Flow relationships
RenderGraph ..> RenderPassContext : creates for
RenderGraphBuilder ..> RenderPass : configures
DependencyResolver ..> RenderPass : analyzes

note top of RenderPass
  Базовый абстрактный класс для всех проходов рендеринга.
  Содержит логику управления зависимостями, статистику
  выполнения и события жизненного цикла.
end note

note top of RenderGraph
  Главный класс системы рендер-графа.
  Управляет компиляцией, выполнением и оптимизацией
  последовательности проходов рендеринга.
end note

note top of RenderGraphBuilder
  Builder для создания и настройки ресурсов.
  Используется в методах Setup() проходов рендеринга
  для декларативного описания требуемых ресурсов.
end note

note top of DependencyResolver
  Анализирует зависимости между проходами и ресурсами.
  Выполняет топологическую сортировку, обнаружение циклов
  и оптимизацию графа зависимостей.
end note

@enduml