@startuml DirectX12Implementation

package "Directx12Impl" {
    
    ' Базовые классы
    abstract class DX12Resource {
        # p_device: ID3D12Device*
        # p_resource: ID3D12Resource*
        # p_currentState: ResourceStates
        # p_name: string
        # p_disposed: bool
        --
        + Name: string
        + {abstract} ResourceType: ResourceType
        + IsDisposed: bool
        --
        + GetNativeHandle(): IntPtr
        + {abstract} GetMemorySize(): ulong
        + GetResource(): ID3D12Resource*
        + GetCurrentState(): ResourceStates
        + SetCurrentState(state: ResourceStates): void
        + GetD3D12Description(): ResourceDesc
        + GetGPUVirtualAddress(): ulong
        + SupportsState(state: ResourceStates): bool
        + {abstract} Dispose(): void
    }

    ' Основной класс устройства
    class DX12GraphicsDevice {
        - p_d3d12: D3D12
        - p_dxgi: DXGI
        - p_device: ComPtr<ID3D12Device>
        - p_dxgiFactory: ComPtr<IDXGIFactory4>
        - p_adapter: ComPtr<IDXGIAdapter1>
        - p_directQueue: ComPtr<ID3D12CommandQueue>
        - p_computeQueue: ComPtr<ID3D12CommandQueue>
        - p_copyQueue: ComPtr<ID3D12CommandQueue>
        - p_descriptorManager: DX12DescriptorHeapManager
        - p_frameManager: FrameFenceManager
        - p_rootSignatureCache: DX12RootSignatureCache
        - p_pipelineStateCache: DX12PipelineStateCache
        - p_capabilities: DeviceCapabilities
        - p_disposed: bool
        --
        + Name: string
        + API: GraphicsAPI
        + Capabilities: DeviceCapabilities
        --
        + CreateTexture(desc: TextureDescription): ITexture
        + CreateBuffer(desc: BufferDescription): IBuffer
        + CreateCommandBuffer(): CommandBuffer
        + CreateShader(desc: ShaderDescription): IShader
        + CreateSampler(desc: SamplerDescription): ISampler
        + CreateRenderState(desc: RenderStateDescription, pipeline: PipelineStateDescription): IRenderState
        + CreateSwapChain(desc: SwapChainDescription, windowHandle: IntPtr): ISwapChain
        + CreateFence(initialValue: ulong): IFence
        + ExecuteCommandBuffer(cmdBuffer: CommandBuffer): void
        + WaitForGPU(): void
        + WaitForFence(fence: IFence): void
        + BeginFrame(): void
        + EndFrame(): void
        + GetCurrentFrameIndex(): int
        + BatchUploadResources(uploadAction: Action<IBatchUploader>): void
        + UploadTextureData<T>(texture: DX12Texture, data: T[], mipLevel: uint, arraySlice: uint): void
        + GetDescriptorManager(): DX12DescriptorHeapManager
        + Dispose(): void
    }

    ' Ресурсы
    class DX12Texture {
        - p_d3d12: D3D12
        - p_description: TextureDescription
        - p_descriptorManager: DX12DescriptorHeapManager
        - p_parentDevice: DX12GraphicsDevice
        - p_views: Dictionary<TextureViewKey, DX12TextureView>
        --
        + Description: TextureDescription
        + Width: uint
        + Height: uint
        + Depth: uint
        + MipLevels: uint
        + ArraySize: uint
        + Format: TextureFormat
        + SampleCount: uint
        --
        + CreateView(desc: TextureViewDescription): ITextureView
        + GetDefaultShaderResourceView(): ITextureView
        + GetDefaultRenderTargetView(): ITextureView
        + GetDefaultDepthStencilView(): ITextureView
        + GetDefaultUnorderedAccessView(): ITextureView
        + SetData<T>(data: T[], mipLevel: uint, arraySlice: uint): void
        + GetData<T>(mipLevel: uint, arraySlice: uint): T[]
        + GetSubresourceIndex(mipLevel: uint, arraySlice: uint): uint
        + GenerateMips(): void
        + SetDataInternal(cmdList: ComPtr<ID3D12GraphicsCommandList>, data: void*, size: int, mipLevel: uint, arraySlice: uint): void
        - CreateTextureResource(): void
        - GetTextureResourceType(): ResourceType
    }

    class DX12Buffer {
        - p_d3d12: D3D12
        - p_description: BufferDescription
        - p_descriptorManager: DX12DescriptorHeapManager
        - p_parentDevice: DX12GraphicsDevice
        - p_mappedData: IntPtr
        - p_views: Dictionary<BufferViewKey, DX12BufferView>
        --
        + Description: BufferDescription
        + Size: uint
        + Usage: BufferUsage
        --
        + CreateView(desc: BufferViewDescription): IBufferView
        + SetData<T>(data: T[]): void
        + GetData<T>(): T[]
        + Map(): IntPtr
        + Unmap(): void
        - CreateBufferResource(): void
        - GetBufferResourceType(): ResourceType
    }

    ' Command Buffer
    class DX12CommandBuffer {
        - p_device: ComPtr<ID3D12Device>
        - p_commandList: ComPtr<ID3D12GraphicsCommandList>
        - p_allocator: ComPtr<ID3D12CommandAllocator>
        - p_type: CommandBufferType
        - p_isRecording: bool
        - p_stateTracker: DX12ResourceStateTracker
        - p_currentRenderState: DX12RenderState
        --
        + Type: CommandBufferType
        + IsRecording: bool
        --
        + Begin(): void
        + End(): void
        + BeginRenderPass(targets: ITextureView[], depth: ITextureView): void
        + EndRenderPass(): void
        + SetRenderState(state: IRenderState): void
        + SetTexture(slot: uint, view: ITextureView): void
        + SetConstantBuffer(slot: uint, view: IBufferView): void
        + DrawIndexed(count: uint): void
        + Dispatch(x: uint, y: uint, z: uint): void
        + CopyTexture(src: ITexture, dst: ITexture): void
        + GetCommandList(): ID3D12GraphicsCommandList*
        - SetRenderStateDirectly(state: IRenderState): void
        - SetShaderResourceDirectly(cmd: SetShaderResourceCommand): void
        - SetConstantBufferDirectly(cmd: SetConstantBufferCommand): void
        - GetRootParameterIndex(stage: ShaderStage, slot: uint, type: ResourceType): uint
    }

    ' Views
    class DX12TextureView {
        - p_texture: DX12Texture
        - p_viewType: TextureViewType
        - p_description: TextureViewDescription
        - p_descriptor: CpuDescriptorHandle
        - p_isDisposed: bool
        --
        + Texture: ITexture
        + ViewType: TextureViewType
        + Description: TextureViewDescription
        --
        + GetDescriptorHandle(): CpuDescriptorHandle
        + GetShaderResourceView(): CpuDescriptorHandle
        + GetRenderTargetView(): CpuDescriptorHandle
        + GetDepthStencilView(): CpuDescriptorHandle
        + GetUnorderedAccessView(): CpuDescriptorHandle
    }

    class DX12BufferView {
        - p_buffer: DX12Buffer
        - p_viewType: BufferViewType  
        - p_description: BufferViewDescription
        - p_descriptor: CpuDescriptorHandle
        - p_isDisposed: bool
        --
        + Buffer: IBuffer
        + ViewType: BufferViewType
        + Description: BufferViewDescription
        --
        + GetDescriptorHandle(): CpuDescriptorHandle
        + GetConstantBufferView(): CpuDescriptorHandle
        + GetShaderResourceView(): CpuDescriptorHandle
        + GetUnorderedAccessView(): CpuDescriptorHandle
        + GetResource(): ID3D12Resource*
    }

    ' Шейдеры
    class DX12Shader {
        - p_description: ShaderDescription
        - p_bytecode: byte[]
        - p_stage: ShaderStage
        - p_d3d12Bytecode: ShaderBytecode
        - p_reflection: ShaderReflection
        - p_isDisposed: bool
        --
        + Name: string
        + Stage: ShaderStage
        + Description: ShaderDescription
        + Bytecode: byte[]
        + ResourceType: ResourceType
        --
        + GetD3D12Bytecode(): ShaderBytecode
        + GetReflection(): ShaderReflection
        + HasConstantBuffer(name: string): bool
        + HasTexture(name: string): bool
        + HasSampler(name: string): bool
    }

    ' Sampler
    class DX12Sampler {
        - p_device: ComPtr<ID3D12Device>
        - p_description: SamplerDescription
        - p_descriptor: CpuDescriptorHandle
        - p_releaseDescriptorCallback: Action<CpuDescriptorHandle>
        - p_isDisposed: bool
        --
        + Name: string
        + ResourceType: ResourceType
        + Description: SamplerDescription
        --
        + GetDescriptorHandle(): CpuDescriptorHandle
    }

    ' Fence
    class DX12Fence {
        - p_fence: ComPtr<ID3D12Fence>
        - p_value: ulong
        - p_event: EventHandle
        - p_isDisposed: bool
        --
        + Value: ulong
        + ResourceType: ResourceType
        --
        + Signal(queue: ID3D12CommandQueue*): void
        + Wait(value: ulong): void
        + IsComplete(): bool
    }

    ' SwapChain
    class DX12SwapChain {
        - p_device: ComPtr<ID3D12Device>
        - p_swapChain: ComPtr<IDXGISwapChain3>
        - p_backBuffers: DX12Texture[]
        - p_description: SwapChainDescription
        - p_currentBackBufferIndex: uint
        - p_disposed: bool
        --
        + Description: SwapChainDescription
        + CurrentBackBufferIndex: uint
        + ResourceType: ResourceType
        --
        + GetBackBuffer(index: uint): ITexture
        + Present(syncInterval: uint): void
        + Resize(width: uint, height: uint): void
    }

    ' Render State
    class DX12RenderState {
        - p_pipelineStateCache: DX12PipelineStateCache
        - p_rootSignatureCache: DX12RootSignatureCache
        - p_pipelineState: ComPtr<ID3D12PipelineState>
        - p_rootSignature: ComPtr<ID3D12RootSignature>
        - p_description: RenderStateDescription
        - p_pipelineDescription: PipelineStateDescription
        - p_disposed: bool
        --
        + Description: RenderStateDescription
        + ResourceType: ResourceType
        --
        + GetPipelineState(): ComPtr<ID3D12PipelineState>
        + GetRootSignature(): ComPtr<ID3D12RootSignature>
        - CreatePipelineState(): void
        - CreateGraphicsPipelineState(): void
        - CreateComputePipelineState(): void
    }

    ' Управление дескрипторами
    class DX12DescriptorHeapManager {
        - p_device: ComPtr<ID3D12Device>
        - p_rtvHeap: DX12StaticDescriptorHeap
        - p_dsvHeap: DX12StaticDescriptorHeap
        - p_srvHeap: DX12StaticDescriptorHeap
        - p_samplerHeap: DX12StaticDescriptorHeap
        - p_gpuSrvHeap: DX12DynamicDescriptorHeap
        - p_gpuSamplerHeap: DX12DynamicDescriptorHeap
        - p_disposed: bool
        --
        + AllocateRTV(count: uint): DX12DescriptorAllocation
        + AllocateDSV(count: uint): DX12DescriptorAllocation
        + AllocateCBVSRVUAV(count: uint): DX12DescriptorAllocation
        + AllocateSampler(count: uint): DX12DescriptorAllocation
        + SetDescriptorHeaps(cmdList: ComPtr<ID3D12GraphicsCommandList>): void
        + CopyToGPUHeap(cpuHandle: CpuDescriptorHandle, count: uint): GpuDescriptorHandle
        + CopySamplerToGPUHeap(cpuHandle: CpuDescriptorHandle, count: uint): GpuDescriptorHandle
        + ResetForNewFrame(): void
        + GetCBVSRVUAVHeap(): ID3D12DescriptorHeap*
        + GetSamplerHeap(): ID3D12DescriptorHeap*
        + GetRTVHeap(): ID3D12DescriptorHeap*
        + GetDSVHeap(): ID3D12DescriptorHeap*
        + GetGPUCBVSRVUAVHeap(): ID3D12DescriptorHeap*
        + GetGPUSamplerHeap(): ID3D12DescriptorHeap*
    }

    ' Статическая куча дескрипторов
    class DX12StaticDescriptorHeap {
        - p_device: ComPtr<ID3D12Device>
        - p_heap: ComPtr<ID3D12DescriptorHeap>
        - p_descriptorSize: uint
        - p_maxDescriptors: uint
        - p_freeIndices: Stack<uint>
        - p_currentIndex: uint
        - p_disposed: bool
        --
        + Allocate(count: uint): DX12DescriptorAllocation
        + GetCPUHandle(index: uint): CpuDescriptorHandle
        + GetHeap(): ComPtr<ID3D12DescriptorHeap>
        + Free(index: uint, count: uint): void
    }

    ' Динамическая куча дескрипторов
    class DX12DynamicDescriptorHeap {
        - p_device: ComPtr<ID3D12Device>
        - p_heap: ComPtr<ID3D12DescriptorHeap>
        - p_type: DescriptorHeapType
        - p_descriptorSize: uint
        - p_maxDescriptors: uint
        - p_currentOffset: uint
        - p_disposed: bool
        --
        + CopyDescriptor(srcHandle: CpuDescriptorHandle, count: uint): GpuDescriptorHandle
        + Reset(): void
        + GetHeap(): ComPtr<ID3D12DescriptorHeap>
        - GetGPUHandle(index: uint): GpuDescriptorHandle
        - GetCPUHandle(index: uint): CpuDescriptorHandle
    }

    ' Аллокация дескрипторов
    class DX12DescriptorAllocation {
        - p_heap: DX12StaticDescriptorHeap
        - p_startIndex: uint
        - p_count: uint
        - p_descriptorSize: uint
        - p_cpuHandle: CpuDescriptorHandle
        --
        + CpuHandle: CpuDescriptorHandle
        + Count: uint
        + StartIndex: uint
        --
        + GetCpuHandle(offset: uint): CpuDescriptorHandle
    }

    ' Отслеживание состояний ресурсов
    class DX12ResourceStateTracker {
        - p_globalResourceStates: Dictionary<ID3D12Resource*, ResourceStates>
        - p_pendingTransitions: List<ResourceBarrier>
        --
        + TrackResource(resource: ID3D12Resource*, state: ResourceStates): void
        + TransitionResource(resource: ID3D12Resource*, newState: ResourceStates): void
        + FlushBarriers(cmdList: ID3D12GraphicsCommandList*): void
        + Reset(): void
        - CreateTransitionBarrier(resource: ID3D12Resource*, before: ResourceStates, after: ResourceStates): ResourceBarrier
    }

    ' Кэши
    class DX12RootSignatureCache {
        - p_device: ComPtr<ID3D12Device>
        - p_cache: Dictionary<RootSignatureDesc, ComPtr<ID3D12RootSignature>>
        --
        + GetOrCreateFromShaderReflection(vs: DX12Shader, ps: DX12Shader, hs: DX12Shader, gs: DX12Shader, ds: DX12Shader): ComPtr<ID3D12RootSignature>
        + GetDefaultGraphicsRootSignature(): ComPtr<ID3D12RootSignature>
        + GetDefaultComputeRootSignature(): ComPtr<ID3D12RootSignature>
        + GetPostProcessRootSignature(): ComPtr<ID3D12RootSignature>
        + GetOrCreateFromDesc1(desc: RootSignatureDesc1): ComPtr<ID3D12RootSignature>
        + Clear(): void
    }

    class DX12PipelineStateCache {
        - p_device: ComPtr<ID3D12Device>
        - p_cache: Dictionary<PSOCacheKey, ComPtr<ID3D12PipelineState>>
        - p_computeCache: Dictionary<ComputePSOCacheKey, ComPtr<ID3D12PipelineState>>
        --
        + GetOrCreatePSO(key: PSOCacheKey): ComPtr<ID3D12PipelineState>
        + GetOrCreateComputePSO(key: ComputePSOCacheKey): ComPtr<ID3D12PipelineState>
        + Clear(): void
        - CreateGraphicsPSOFromKey(key: PSOCacheKey): ComPtr<ID3D12PipelineState>
        - CreateComputePSOFromKey(key: ComputePSOCacheKey): ComPtr<ID3D12PipelineState>
    }

    ' Frame Management
    class FrameFenceManager {
        - p_fence: ComPtr<ID3D12Fence>
        - p_fenceValues: ulong[]
        - p_frameIndex: int
        - p_event: EventHandle
        --
        + CurrentFrameIndex: int
        --
        + SignalEndOfFrame(queue: ComPtr<ID3D12CommandQueue>): void
        + WaitForPreviousFrame(): void
        + WaitForGPU(queue: ComPtr<ID3D12CommandQueue>): void
        + MoveToNextFrame(): void
    }

    ' Builders
    class DX12RootSignatureDescBuilder {
        - p_parameters: List<RootParameter1>
        - p_staticSamplers: List<StaticSamplerDesc>
        - p_flags: RootSignatureFlags
        --
        + AllowInputAssemblerInputLayout(): DX12RootSignatureDescBuilder
        + AddRootCBV(shaderRegister: uint, registerSpace: uint, visibility: ShaderVisibility): DX12RootSignatureDescBuilder
        + AddDescriptorTableSRV(baseRegister: uint, registerSpace: uint, visibility: ShaderVisibility): DX12RootSignatureDescBuilder
        + AddDescriptorTableUAV(baseRegister: uint, registerSpace: uint, visibility: ShaderVisibility): DX12RootSignatureDescBuilder
        + AddDescriptorTableSamplers(baseRegister: uint, descriptorCount: uint, registerSpace: uint, visibility: ShaderVisibility): DX12RootSignatureDescBuilder
        + AddStaticSampler(shaderRegister: uint, filter: Filter, addressMode: TextureAddressMode, registerSpace: uint, visibility: ShaderVisibility): DX12RootSignatureDescBuilder
        + Build(): RootSignatureDesc1
    }

    ' Utilities
    class TextureUploadHelper {
        - p_device: ComPtr<ID3D12Device>
        - p_d3d12: D3D12
        --
        + UploadTextureData<T>(texture: DX12Texture, data: T[], mipLevel: uint, arraySlice: uint, commandList: ComPtr<ID3D12GraphicsCommandList>): void
    }

    class DX12BatchUploader {
        - p_device: DX12GraphicsDevice
        - p_commandList: ComPtr<ID3D12GraphicsCommandList>
        --
        + UploadTexture<T>(texture: DX12Texture, data: T[], mipLevel: uint, arraySlice: uint): void
        + UploadBuffer<T>(buffer: DX12Buffer, data: T[]): void
    }

    ' Data structures
    class PSOCacheKey {
        + VertexShader: DX12Shader
        + PixelShader: DX12Shader
        + DomainShader: DX12Shader
        + HullShader: DX12Shader
        + GeometryShader: DX12Shader
        + PipelineStateDescription: PipelineStateDescription
        + RenderStateDescription: RenderStateDescription
        + RootSignature: ComPtr<ID3D12RootSignature>
    }

    class ComputePSOCacheKey {
        + ComputeShader: DX12Shader
        + RootSignature: ComPtr<ID3D12RootSignature>
    }
}

' Наследование
DX12Resource <|-- DX12Texture
DX12Resource <|-- DX12Buffer

' Композиция и использование
DX12GraphicsDevice --> DX12DescriptorHeapManager : contains
DX12GraphicsDevice --> DX12ResourceStateTracker : contains
DX12GraphicsDevice --> FrameFenceManager : contains
DX12GraphicsDevice --> DX12RootSignatureCache : contains
DX12GraphicsDevice --> DX12PipelineStateCache : contains
DX12GraphicsDevice --> DX12Texture : creates
DX12GraphicsDevice --> DX12Buffer : creates
DX12GraphicsDevice --> DX12CommandBuffer : creates
DX12GraphicsDevice --> DX12Shader : creates
DX12GraphicsDevice --> DX12Sampler : creates
DX12GraphicsDevice --> DX12RenderState : creates
DX12GraphicsDevice --> DX12Fence : creates
DX12GraphicsDevice --> DX12SwapChain : creates

DX12Texture --> DX12TextureView : creates
DX12Texture --> TextureUploadHelper : uses
DX12Buffer --> DX12BufferView : creates

DX12CommandBuffer --> DX12ResourceStateTracker : uses
DX12CommandBuffer --> DX12RenderState : uses

DX12TextureView --> DX12Texture : references
DX12BufferView --> DX12Buffer : references

DX12RenderState --> DX12RootSignatureCache : uses
DX12RenderState --> DX12PipelineStateCache : uses

DX12DescriptorHeapManager --> DX12StaticDescriptorHeap : contains
DX12DescriptorHeapManager --> DX12DynamicDescriptorHeap : contains
DX12StaticDescriptorHeap --> DX12DescriptorAllocation : creates
DX12DynamicDescriptorHeap --> DX12DescriptorAllocation : creates

DX12RootSignatureCache --> DX12RootSignatureDescBuilder : uses
DX12PipelineStateCache --> PSOCacheKey : uses
DX12PipelineStateCache --> ComputePSOCacheKey : uses

note right of DX12GraphicsDevice
  Основной класс DirectX12 реализации:
  - Создает все ресурсы и объекты
  - Управляет кэшами состояний
  - Координирует загрузку ресурсов
  - Управляет синхронизацией кадров
  - Содержит все основные менеджеры
end note

note bottom of DX12DescriptorHeapManager
  Полная система управления дескрипторами:
  - 6 различных куч для разных типов
  - Статические для RTV/DSV/SRV/Sampler
  - Динамические GPU-visible для шейдеров
  - Автоматическое копирование в GPU кучи
  - Сброс динамических куч каждый кадр
end note

@enduml