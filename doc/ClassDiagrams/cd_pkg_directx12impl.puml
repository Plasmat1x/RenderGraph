@startuml DirectX12Implementation

package "DirectX12 Implementation" {
    class DX12GraphicsDevice {
        - _d3d12: D3D12
        - _dxgi: DXGI
        - _device: ID3D12Device*
        - _dxgiFactory: IDXGIFactory4*
        - _adapter: IDXGIAdapter1*
        - _directQueue: ID3D12CommandQueue*
        - _computeQueue: ID3D12CommandQueue*
        - _copyQueue: ID3D12CommandQueue*
        - _rtvHeap: ID3D12DescriptorHeap*
        - _dsvHeap: ID3D12DescriptorHeap*
        - _cbvSrvUavHeap: ID3D12DescriptorHeap*
        - _samplerHeap: ID3D12DescriptorHeap*
        - _rtvDescriptorSize: uint
        - _dsvDescriptorSize: uint
        - _cbvSrvUavDescriptorSize: uint
        - _samplerDescriptorSize: uint
        - _rtvAllocator: DescriptorAllocator
        - _dsvAllocator: DescriptorAllocator
        - _cbvSrvUavAllocator: DescriptorAllocator
        - _samplerAllocator: DescriptorAllocator
        - _frameManager: FrameFenceManager
        - _rootSignatureCache: DX12RootSignatureCache
        - _pipelineStateCache: DX12PipelineStateCache
        - _capabilities: DeviceCapabilities
        - _isDisposed: bool
        --
        + Name: string
        + API: GraphicsAPI
        + Capabilities: DeviceCapabilities
        --
        + CreateTexture(description: TextureDescription): ITexture
        + CreateBuffer(description: BufferDescription): IBuffer
        + CreateShader(description: ShaderDescription): IShader
        + CreateSampler(description: SamplerDescription): ISampler
        + CreateRenderState(description: RenderStateDescription): IRenderState
        + CreateRenderState(description: RenderStateDescription, pipeline: PipelineStateDescription): IRenderState
        + CreateCommandBuffer(): CommandBuffer
        + CreateCommandBuffer(type: CommandBufferType): CommandBuffer
        + ExecuteCommandBuffer(commandBuffer: CommandBuffer): void
        + ExecuteCommandBuffers(commandBuffers: CommandBuffer[]): void
        + WaitForGPU(): void
        + BeginFrame(): void
        + EndFrame(): void
        + GetCurrentFrameIndex(): int
        + CreateSwapChain(description: SwapChainDescription): ISwapChain
        + Present(): void
        + Dispose(): void
    }

    class DX12Texture {
        - _device: ID3D12Device*
        - _d3d12: D3D12
        - _resource: ID3D12Resource*
        - _description: TextureDescription
        - _currentState: ResourceStates
        - _dxgiFormat: Format
        - _views: Dictionary<TextureViewKey, DX12TextureView>
        - _releaseDescriptorCallback: Action<CpuDescriptorHandle>
        - _isDisposed: bool
        --
        + Description: TextureDescription
        + Name: string
        + ResourceType: ResourceType
        + Width: uint
        + Height: uint
        + Depth: uint
        + MipLevels: uint
        + ArraySize: uint
        + Format: TextureFormat
        + SampleCount: uint
        + IsDisposed: bool
        --
        + CreateView(description: TextureViewDescription): ITextureView
        + GetDefaultShaderResourceView(): ITextureView
        + GetDefaultRenderTargetView(): ITextureView
        + GetDefaultDepthStencilView(): ITextureView
        + GetDefaultUnorderedAccessView(): ITextureView
        + SetData<T>(data: T[], mipLevel: uint, arraySlice: uint): void
        + GetData<T>(mipLevel: uint, arraySlice: uint): T[]
        + GetSubresourceIndex(mipLevel: uint, arraySlice: uint): uint
        + GenerateMips(): void
        + GetResource(): ID3D12Resource*
        + GetCurrentState(): ResourceStates
        + SetCurrentState(state: ResourceStates): void
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    class DX12Buffer {
        - _device: ID3D12Device*
        - _d3d12: D3D12
        - _resource: ID3D12Resource*
        - _description: BufferDescription
        - _currentState: ResourceStates
        - _gpuVirtualAddress: ulong
        - _mappedData: void*
        - _views: Dictionary<BufferViewType, DX12BufferView>
        - _releaseDescriptorCallback: Action<CpuDescriptorHandle>
        - _isDisposed: bool
        --
        + Description: BufferDescription
        + Name: string
        + ResourceType: ResourceType
        + Size: ulong
        + Stride: uint
        + Usage: BufferUsage
        + IsMapped: bool
        + IsDisposed: bool
        --
        + CreateView(description: BufferViewDescription): IBufferView
        + GetDefaultShaderResourceView(): IBufferView
        + GetDefaultUnorderedAccessView(): IBufferView
        + Map(mode: MapMode): IntPtr
        + Unmap(): void
        + SetData<T>(data: T[], offset: ulong): void
        + SetData<T>(data: T, offset: ulong): void
        + GetData<T>(offset: ulong, count: ulong): T[]
        + GetData<T>(offset: ulong): T
        + GetResource(): ID3D12Resource*
        + GetGPUVirtualAddress(): ulong
        + GetCurrentState(): ResourceStates
        + SetCurrentState(state: ResourceStates): void
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    class DX12CommandBuffer {
        - _device: ID3D12Device*
        - _d3d12: D3D12
        - _commandList: ID3D12GraphicsCommandList*
        - _commandAllocator: ID3D12CommandAllocator*
        - _d3d12Type: CommandListType
        - _currentPipelineState: ID3D12PipelineState*
        - _currentRootSignature: ID3D12RootSignature*
        - _stateTracker: DX12ResourceStateTracker
        - _currentRenderTargets: CpuDescriptorHandle[]
        - _currentDepthStencil: CpuDescriptorHandle?
        - _renderTargetCount: uint
        --
        + Begin(): void
        + End(): void
        + Reset(): void
        + SetRenderTargets(colorTargets: ITextureView[], depthTarget: ITextureView): void
        + SetRenderTarget(colorTarget: ITextureView, depthTarget: ITextureView): void
        + SetViewport(viewport: Viewport): void
        + SetScissorRect(rect: Rectangle): void
        + ClearRenderTarget(target: ITextureView, color: Vector4): void
        + ClearDepthStencil(target: ITextureView, flags: ClearFlags, depth: float, stencil: byte): void
        + TransitionResource(resource: IResource, newState: ResourceState): void
        + Draw(vertexCount: uint, instanceCount: uint, startVertex: uint, startInstance: uint): void
        + DrawIndexed(indexCount: uint, instanceCount: uint, startIndex: uint, baseVertex: int, startInstance: uint): void
        + Dispatch(groupCountX: uint, groupCountY: uint, groupCountZ: uint): void
        + SetVertexBuffer(buffer: IBufferView, slot: uint): void
        + SetIndexBuffer(buffer: IBufferView, format: IndexFormat): void
        + SetPrimitiveTopology(topology: PrimitiveTopology): void
        + SetRenderState(renderState: IRenderState): void
        + SetVertexShader(shader: IShader): void
        + SetPixelShader(shader: IShader): void
        + SetComputeShader(shader: IShader): void
        + SetShaderResource(stage: ShaderStage, slot: uint, resource: ITextureView): void
        + SetUnorderedAccess(stage: ShaderStage, slot: uint, resource: ITextureView): void
        + SetConstantBuffer(stage: ShaderStage, slot: uint, buffer: IBufferView): void
        + SetSampler(stage: ShaderStage, slot: uint, sampler: ISampler): void
        + CopyTexture(src: ITexture, dst: ITexture): void
        + CopyBuffer(src: IBuffer, dst: IBuffer): void
        + DrawFullscreenQuad(): void
        + GetCommandList(): ID3D12GraphicsCommandList*
        + Dispose(): void
    }

    class DX12Shader {
        - _description: ShaderDescription
        - _bytecode: byte[]
        - _stage: ShaderStage
        - _d3d12Bytecode: ShaderBytecode
        - _isDisposed: bool
        --
        + Name: string
        + ResourceType: ResourceType
        + Stage: ShaderStage
        + Description: ShaderDescription
        + Bytecode: byte[]
        + IsDisposed: bool
        --
        + GetReflection(): ShaderReflection
        + HasConstantBuffer(name: string): bool
        + HasTexture(name: string): bool
        + HasSampler(name: string): bool
        + GetD3D12Bytecode(): ShaderBytecode
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    class DX12Sampler {
        - _device: ID3D12Device*
        - _description: SamplerDescription
        - _descriptor: CpuDescriptorHandle
        - _releaseDescriptorCallback: Action<CpuDescriptorHandle>
        - _isDisposed: bool
        --
        + Name: string
        + ResourceType: ResourceType
        + Description: SamplerDescription
        + IsDisposed: bool
        --
        + GetDescriptorHandle(): CpuDescriptorHandle
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    class DX12RenderState {
        - _device: ID3D12Device*
        - _description: RenderStateDescription
        - _pipelineDescription: PipelineStateDescription
        - _rootSignatureCache: DX12RootSignatureCache
        - _pipelineStateCache: DX12PipelineStateCache
        - _pipelineState: ID3D12PipelineState*
        - _rootSignature: ID3D12RootSignature*
        - _isDisposed: bool
        --
        + Name: string
        + ResourceType: ResourceType
        + Description: RenderStateDescription
        + IsDisposed: bool
        --
        + GetPipelineState(): ID3D12PipelineState*
        + GetRootSignature(): ID3D12RootSignature*
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    class DX12TextureView {
        - _texture: DX12Texture
        - _viewType: TextureViewType
        - _description: TextureViewDescription
        - _descriptor: CpuDescriptorHandle
        - _isDisposed: bool
        --
        + Texture: ITexture
        + ViewType: TextureViewType
        + Description: TextureViewDescription
        --
        + GetDescriptorHandle(): CpuDescriptorHandle
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }

    class DX12BufferView {
        - _buffer: DX12Buffer
        - _viewType: BufferViewType
        - _description: BufferViewDescription
        - _descriptor: CpuDescriptorHandle
        - _isDisposed: bool
        --
        + Buffer: IBuffer
        + ViewType: BufferViewType
        + Description: BufferViewDescription
        --
        + GetDescriptorHandle(): CpuDescriptorHandle
        + GetVertexBufferView(): VertexBufferView
        + GetIndexBufferView(): IndexBufferView
        + GetConstantBufferViewDesc(): ConstantBufferViewDesc
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }

    class DX12Fence {
        - _fence: ID3D12Fence*
        - _fenceEvent: AutoResetEvent
        - _currentValue: ulong
        - _isDisposed: bool
        --
        + Value: ulong
        + IsSignaled: bool
        --
        + Signal(value: ulong): void
        + SignalFromQueue(queue: ID3D12CommandQueue*, value: ulong): void
        + Wait(value: ulong, timeoutMs: uint): void
        + GetCompletedValue(): ulong
        + WaitForQueue(queue: ID3D12CommandQueue*, value: ulong): void
        + GetFence(): ID3D12Fence*
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }

    ' Helper classes
    class FrameFenceManager {
        - _fence: DX12Fence
        - _fenceValues: ulong[]
        - _frameCount: int
        - _currentFenceValue: ulong
        - _currentFrameIndex: int
        --
        + CurrentFrameIndex: int
        + CurrentFenceValue: ulong
        --
        + WaitForPreviousFrame(): void
        + SignalEndOfFrame(queue: ID3D12CommandQueue*): void
        + MoveToNextFrame(): void
        + WaitForGPU(queue: ID3D12CommandQueue*): void
        + Dispose(): void
    }

    class DX12ResourceStateTracker {
        - {static} s_globalResourceStates: Dictionary<ID3D12Resource*, ResourceStates>
        - {static} s_globalMutex: object
        - _finalResourceStates: Dictionary<ID3D12Resource*, ResourceStates>
        - _pendingResourceBarriers: List<ResourceBarrier>
        - _resourceBarriers: List<ResourceBarrier>
        - _pendingResourceStates: Dictionary<ID3D12Resource*, ResourceStates>
        --
        + TransitionResource(resource: ID3D12Resource*, stateAfter: ResourceStates, subresource: uint): void
        + UAVBarrier(resource: ID3D12Resource*): void
        + AliasBarrier(resourceBefore: ID3D12Resource*, resourceAfter: ID3D12Resource*): void
        + FlushResourceBarriers(commandList: ID3D12GraphicsCommandList*): void
        + ResolvePendingResourceBarriers(): void
        + CommitFinalResourceStates(): void
        + Reset(): void
        + GetPendingBarrierCount(): int
        + {static} ResetGlobalState(): void
    }

    class DescriptorAllocator {
        - _heap: ID3D12DescriptorHeap*
        - _descriptorSize: uint
        - _maxDescriptors: uint
        - _currentIndex: uint
        - _freeIndices: Stack<uint>
        --
        + Allocate(): CpuDescriptorHandle
        + Free(index: uint): void
    }

    class DX12RootSignatureCache {
        - _device: ID3D12Device*
        - _cache: Dictionary<RootSignatureDesc, ID3D12RootSignature*>
        - _isDisposed: bool
        --
        + GetOrCreate(desc: RootSignatureDesc): ID3D12RootSignature*
        + GetDefaultGraphicsRootSignature(): ID3D12RootSignature*
        + GetDefaultComputeRootSignature(): ID3D12RootSignature*
        + Clear(): void
        + Dispose(): void
    }

    class DX12PipelineStateCache {
        - _graphicsCache: Dictionary<GraphicsPipelineStateDesc, ID3D12PipelineState*>
        - _computeCache: Dictionary<ComputePipelineStateDesc, ID3D12PipelineState*>
        - _device: ID3D12Device*
        - _isDisposed: bool
        --
        + GetOrCreateGraphicsPipeline(desc: GraphicsPipelineStateDesc): ID3D12PipelineState*
        + GetOrCreateComputePipeline(desc: ComputePipelineStateDesc): ID3D12PipelineState*
        + Clear(): void
        + Dispose(): void
    }

    class DX12Helpers {
        + {static} ConvertFormat(format: TextureFormat): Format
        + {static} ConvertResourceState(state: ResourceState): ResourceStates
        + {static} ConvertFilter(minFilter: TextureFilter, magFilter: TextureFilter, mipFilter: TextureFilter, isComparison: bool): D3D12_FILTER
        + {static} ConvertAddressMode(mode: TextureAddressMode): D3D12_TEXTURE_ADDRESS_MODE
        + {static} ConvertComparisonFunc(func: ComparisonFunc): D3D12_COMPARISON_FUNC
        + {static} ConvertComparisonFunction(func: ComparisonFunction): ComparisonFunc
        + {static} ConvertToHeapType(usage: ResourceUsage): D3D12_HEAP_TYPE
        + {static} ConvertBindFlags(flags: BindFlags): D3D12_RESOURCE_FLAGS
        + {static} GetFormatSize(format: Format): uint
        + {static} IsCompressedFormat(format: Format): bool
        + {static} IsDepthStencilFormat(format: Format): bool
        + {static} AlignUp(size: ulong, alignment: ulong): ulong
        + {static} CalculateTextureSize(width: uint, height: uint, depth: uint, mipLevels: uint, arraySize: uint, format: Format): ulong
    }

    class TextureUploadHelper {
        - _device: ID3D12Device*
        - _d3d12: D3D12
        --
        + UploadTextureData<T>(texture: DX12Texture, data: T[], mipLevel: uint, arraySlice: uint, commandList: ID3D12GraphicsCommandList*): void
    }

    class PipelineStateDescription <<helper>> {
        + VertexShader: IShader
        + PixelShader: IShader
        + DomainShader: IShader
        + HullShader: IShader
        + GeometryShader: IShader
        + ComputeShader: IShader
        + InputLayout: InputLayoutDescription
        + PrimitiveTopology: PrimitiveTopology
        + RenderTargetCount: uint
        + RenderTargetFormats: TextureFormat[]
        + DepthStencilFormat: TextureFormat
        + SampleCount: uint
        + SampleQuality: uint
        + SampleMask: uint
    }

    ' TODO классы (не реализованы)
    class DX12SwapChain <<not implemented>> {
        + Description: SwapChainDescription
        + CurrentBackBufferIndex: uint
        + GetBackBuffer(index: uint): ITexture
        + Present(syncInterval: uint): void
        + Resize(width: uint, height: uint): void
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }
}

' Реализация интерфейсов
IGraphicsDevice <|.. DX12GraphicsDevice
ITexture <|.. DX12Texture
IBuffer <|.. DX12Buffer
CommandBuffer <|-- DX12CommandBuffer
IShader <|.. DX12Shader
ISampler <|.. DX12Sampler
ITextureView <|.. DX12TextureView
IBufferView <|.. DX12BufferView
IFence <|.. DX12Fence
IRenderState <|.. DX12RenderState
ISwapChain <|.. DX12SwapChain : "not implemented"

' Внутренние связи
DX12GraphicsDevice --> DX12Texture : creates
DX12GraphicsDevice --> DX12Buffer : creates
DX12GraphicsDevice --> DX12CommandBuffer : creates
DX12GraphicsDevice --> DX12Shader : creates
DX12GraphicsDevice --> DX12Sampler : creates
DX12GraphicsDevice --> DX12RenderState : creates
DX12GraphicsDevice --> DX12Fence : uses
DX12GraphicsDevice --> DescriptorAllocator : uses multiple
DX12GraphicsDevice --> FrameFenceManager : uses
DX12GraphicsDevice --> DX12RootSignatureCache : uses
DX12GraphicsDevice --> DX12PipelineStateCache : uses

DX12Texture --> DX12TextureView : creates
DX12Texture --> TextureUploadHelper : uses
DX12Buffer --> DX12BufferView : creates

DX12CommandBuffer --> DX12ResourceStateTracker : uses
DX12CommandBuffer --> DX12Texture : uses
DX12CommandBuffer --> DX12Buffer : uses
DX12CommandBuffer --> DX12TextureView : uses
DX12CommandBuffer --> DX12BufferView : uses
DX12CommandBuffer --> DX12RenderState : uses

DX12RenderState --> DX12RootSignatureCache : uses
DX12RenderState --> DX12PipelineStateCache : uses
DX12RenderState --> PipelineStateDescription : uses

' Статус реализации
note right of DX12SwapChain
  Требует window handle
  для создания
end note

note bottom of DX12GraphicsDevice
  Все основные компоненты реализованы:
  - Resource State Tracking
  - Frame Synchronization
  - PSO/Root Signature Caching
  - Descriptor Management
end note

@enduml