@startuml GraphicsAPI

package "GraphicsAPI Abstraction" {
    interface IGraphicsDevice {
        + Name: string
        + API: GraphicsAPI
        + Capabilities: DeviceCapabilities
        --
        + CreateTexture(description: TextureDescription): ITexture
        + CreateBuffer(description: BufferDescription): IBuffer
        + CreateShader(description: ShaderDescription): IShader
        + CreateRenderState(description: RenderStateDescription): IRenderState
        + CreateSampler(description: SamplerDescription): ISampler
        + CreateCommandBuffer(): CommandBuffer
        + CreateCommandBuffer(type: CommandBufferType): CommandBuffer
        + ExecuteCommandBuffer(commandBuffer: CommandBuffer): void
        + ExecuteCommandBuffers(commandBuffers: CommandBuffer[]): void
        + WaitForGPU(): void
        + WaitForFence(fence: IFence): void
        + CreateFence(initialValue: ulong): IFence
        + GetMemoryInfo(): MemoryInfo
        + GetTotalMemory(): ulong
        + GetAvailableMemory(): ulong
        + CreateSwapChain(description: SwapChainDescription): ISwapChain
        + Present(): void
        + SupportsFormat(format: TextureFormat, usage: FormatUsage): bool
        + GetFormatBytesPerPixel(format: TextureFormat): uint
        + GetSupportedSampleCounts(format: TextureFormat): SampleCountFlags
        + Dispose(): void
    }

    interface ITexture {
        + Description: TextureDescription
        + Name: string
        + ResourceType: ResourceType
        + Width: uint
        + Height: uint
        + Depth: uint
        + MipLevels: uint
        + ArraySize: uint
        + Format: TextureFormat
        + SampleCount: uint
        + IsDisposed: bool
        --
        + CreateView(description: TextureViewDescription): ITextureView
        + GetDefaultShaderResourceView(): ITextureView
        + GetDefaultRenderTargetView(): ITextureView
        + GetDefaultDepthStencilView(): ITextureView
        + GetDefaultUnorderedAccessView(): ITextureView
        + SetData<T>(data: T[], mipLevel: uint, arraySlice: uint): void
        + GetData<T>(mipLevel: uint, arraySlice: uint): T[]
        + GetSubresourceIndex(mipLevel: uint, arraySlice: uint): uint
        + GenerateMips(): void
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    interface IBuffer {
        + Description: BufferDescription
        + Name: string
        + ResourceType: ResourceType
        + Size: ulong
        + Stride: uint
        + Usage: BufferUsage
        + IsMapped: bool
        + IsDisposed: bool
        --
        + CreateView(description: BufferViewDescription): IBufferView
        + GetDefaultShaderResourceView(): IBufferView
        + GetDefaultUnorderedAccessView(): IBufferView
        + Map(mode: MapMode): IntPtr
        + Unmap(): void
        + SetData<T>(data: T[], offset: ulong): void
        + SetData<T>(data: T, offset: ulong): void
        + GetData<T>(offset: ulong, count: ulong): T[]
        + GetData<T>(offset: ulong): T
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    interface IShader {
        + Name: string
        + ResourceType: ResourceType
        + Stage: ShaderStage
        + Description: ShaderDescription
        + Bytecode: byte[]
        + IsDisposed: bool
        --
        + GetReflection(): ShaderReflection
        + HasConstantBuffer(name: string): bool
        + HasTexture(name: string): bool
        + HasSampler(name: string): bool
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    abstract class CommandBuffer {
        + IsRecording: bool
        + Type: CommandBufferType
        + Name: string
        --
        + Begin(): void
        + End(): void
        + Reset(): void
        + SetRenderTargets(colorTargets: ITextureView[], depthTarget: ITextureView): void
        + SetRenderTarget(colorTarget: ITextureView, depthTarget: ITextureView): void
        + SetViewport(viewport: Viewport): void
        + SetViewports(viewports: Viewport[]): void
        + SetScissorRect(rect: Rectangle): void
        + SetScissorRects(rects: Rectangle[]): void
        + ClearRenderTarget(target: ITextureView, color: Vector4): void
        + ClearDepthStencil(target: ITextureView, flags: ClearFlags, depth: float, stencil: byte): void
        + ClearUnorderedAccess(target: ITextureView, value: Vector4): void
        + ClearUnorderedAccess(target: IBufferView, value: uint): void
        + TransitionResource(resource: IResource, newState: ResourceState): void
        + TransitionResources(resources: IResource[], newStates: ResourceState[]): void
        + UAVBarrier(resource: IResource): void
        + UAVBarriers(resources: IResource[]): void
        + SetVertexBuffer(buffer: IBufferView, slot: uint): void
        + SetVertexBuffers(buffers: IBufferView[], startSlot: uint): void
        + SetIndexBuffer(buffer: IBufferView, format: IndexFormat): void
        + SetVertexShader(shader: IShader): void
        + SetPixelShader(shader: IShader): void
        + SetComputeShader(shader: IShader): void
        + SetGeometryShader(shader: IShader): void
        + SetHullShader(shader: IShader): void
        + SetDomainShader(shader: IShader): void
        + SetShaderResource(stage: ShaderStage, slot: uint, resource: ITextureView): void
        + SetShaderResources(stage: ShaderStage, startSlot: uint, resources: ITextureView[]): void
        + SetUnorderedAccess(stage: ShaderStage, slot: uint, resource: ITextureView): void
        + SetUnorderedAccesses(stage: ShaderStage, startSlot: uint, resources: ITextureView[]): void
        + SetConstantBuffer(stage: ShaderStage, slot: uint, buffer: IBufferView): void
        + SetConstantBuffers(stage: ShaderStage, startSlot: uint, buffers: IBufferView[]): void
        + SetSampler(stage: ShaderStage, slot: uint, sampler: ISampler): void
        + SetSamplers(stage: ShaderStage, startSlot: uint, samplers: ISampler[]): void
        + SetRenderState(renderState: IRenderState): void
        + SetBlendState(blendState: IBlendState, blendFactor: Vector4, sampleMask: uint): void
        + SetDepthStencilState(depthStencilState: IDepthStencilState, stencilRef: uint): void
        + SetRasterizerState(rasterizerState: IRasterizerState): void
        + Draw(vertexCount: uint, instanceCount: uint, startVertex: uint, startInstance: uint): void
        + DrawIndexed(indexCount: uint, instanceCount: uint, startIndex: uint, baseVertex: int, startInstance: uint): void
        + DrawIndirect(argsBuffer: IBufferView, offset: ulong): void
        + DrawIndexedIndirect(argsBuffer: IBufferView, offset: ulong): void
        + Dispatch(groupCountX: uint, groupCountY: uint, groupCountZ: uint): void
        + DispatchIndirect(argsBuffer: IBufferView, offset: ulong): void
        + CopyTexture(src: ITexture, dst: ITexture): void
        + CopyTextureRegion(src: ITexture, srcMip: uint, srcArray: uint, srcBox: Box, dst: ITexture, dstMip: uint, dstArray: uint, dstOffset: Point3D): void
        + CopyBuffer(src: IBuffer, dst: IBuffer): void
        + CopyBufferRegion(src: IBuffer, srcOffset: ulong, dst: IBuffer, dstOffset: ulong, size: ulong): void
        + ResolveTexture(src: ITexture, srcArray: uint, dst: ITexture, dstArray: uint, format: TextureFormat): void
        + BeginQuery(query: IQuery): void
        + EndQuery(query: IQuery): void
        + PushDebugGroup(name: string): void
        + PopDebugGroup(): void
        + InsertDebugMarker(name: string): void
        + DrawFullscreenQuad(): void
        + Dispose(): void
    }

    interface ITextureView {
        + Texture: ITexture
        + ViewType: TextureViewType
        + Description: TextureViewDescription
        --
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }

    interface IBufferView {
        + Buffer: IBuffer
        + ViewType: BufferViewType
        + Description: BufferViewDescription
        --
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }

    interface ISampler {
        + Name: string
        + ResourceType: ResourceType
        + Description: SamplerDescription
        + IsDisposed: bool
        --
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    interface IRenderState {
        + Name: string
        + ResourceType: ResourceType
        + Description: RenderStateDescription
        + IsDisposed: bool
        --
        + GetNativeHandle(): IntPtr
        + GetMemorySize(): ulong
        + Dispose(): void
    }

    interface IFence {
        + Value: ulong
        + IsSignaled: bool
        --
        + Signal(value: ulong): void
        + Wait(value: ulong, timeoutMs: uint): void
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }

    interface ISwapChain {
        + Description: SwapChainDescription
        + CurrentBackBufferIndex: uint
        --
        + GetBackBuffer(index: uint): ITexture
        + Present(syncInterval: uint): void
        + Resize(width: uint, height: uint): void
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }

    enum ResourceState {
        Undefined
        Common
        RenderTarget
        UnorderedAccess
        DepthWrite
        DepthRead
        ShaderResource
        StreamOut
        IndirectArgument
        CopyDestination
        CopySource
        ResolveDestination
        ResolveSource
        Present
    }

    enum GraphicsAPI {
        Unknown
        DirectX11
        DirectX12
        Vulkan
        OpenGL
        Metal
    }

    enum CommandBufferType {
        Direct
        Bundle
        Compute
        Copy
    }

    enum ShaderStage {
        Vertex
        Hull
        Domain
        Geometry
        Pixel
        Compute
        All
    }

    enum MapMode {
        Read
        Write
        ReadWrite
        WriteDiscard
        WriteNoOverwrite
    }

    enum TextureViewType {
        ShaderResource
        RenderTarget
        DepthStencil
        UnorderedAccess
    }

    enum BufferViewType {
        ShaderResource
        UnorderedAccess
        VertexBuffer
        IndexBuffer
        ConstantBuffer
    }

    enum ClearFlags {
        Depth
        Stencil
        DepthStencil
    }
}

' Graphics API Relationships
IGraphicsDevice --> ITexture : creates
IGraphicsDevice --> IBuffer : creates
IGraphicsDevice --> IShader : creates
IGraphicsDevice --> ISampler : creates
IGraphicsDevice --> IRenderState : creates
IGraphicsDevice --> CommandBuffer : creates
IGraphicsDevice --> IFence : creates
IGraphicsDevice --> ISwapChain : creates

ITexture --> ITextureView : creates
IBuffer --> IBufferView : creates

CommandBuffer --> ITextureView : uses
CommandBuffer --> IBufferView : uses
CommandBuffer --> IShader : uses
CommandBuffer --> ISampler : uses
CommandBuffer --> IRenderState : uses

@enduml