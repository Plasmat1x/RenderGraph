@startuml Passes

package "Render Passes" {
    class GeometryPass {
        + ColorTarget: ResourceHandle
        + DepthTarget: ResourceHandle
        + CameraBuffer: ResourceHandle
        + ViewportWidth: uint
        + ViewportHeight: uint
        + ClearColor: bool
        + ClearDepth: bool
        + ClearColorValue: Vector4
        + ClearDepthValue: float
        + RenderableObjects: List<RenderableObject>
        --
        + Setup(builder: RenderGraphBuilder): void
        + Execute(context: RenderPassContext): void
        + OnGraphCompiled(renderGraph: RenderGraph): void
        - UpdateCameraConstants(context: RenderPassContext, buffer: IBuffer): void
        - RenderObjects(context: RenderPassContext): void
        - SetupMaterial(context: RenderPassContext, material: Material): void
        + Dispose(): void
    }

    class BlurPass {
        + InputTexture: ResourceHandle
        + OutputTexture: ResourceHandle
        + BlurRadius: float
        + BlurSigma: float
        + BlurDirection: BlurDirection
        + Quality: BlurQuality
        - _intermediateTexture: ResourceHandle
        - _blurParamsBuffer: ResourceHandle
        - _textureWidth: uint
        - _textureHeight: uint
        - _vertexShader: IShader
        - _horizontalBlurShader: IShader
        - _verticalBlurShader: IShader
        - _linearSampler: ISampler
        --
        + Setup(builder: RenderGraphBuilder): void
        + Execute(context: RenderPassContext): void
        + OnGraphCompiled(renderGraph: RenderGraph): void
        - CreateShaders(renderGraph: RenderGraph): void
        - UpdateBlurParameters(context: RenderPassContext): void
        - PerformBlur(context: RenderPassContext, input: ResourceHandle, output: ResourceHandle, direction: BlurDirection): void
        - SetupBlurShaders(commandBuffer: CommandBuffer, direction: BlurDirection): void
        - GetKernelSize(): int
        + Dispose(): void
    }

    class ColorCorrectionPass {
        + InputTexture: ResourceHandle
        + OutputTexture: ResourceHandle
        + Gamma: float
        + Contrast: float
        + Brightness: float
        + Saturation: float
        + ColorBalance: Vector3
        + EnableToneMapping: bool
        + ToneMappingType: ToneMappingType
        + Exposure: float
        - _colorCorrectionBuffer: ResourceHandle
        - _vertexShader: IShader
        - _pixelShader: IShader
        - _pointSampler: ISampler
        --
        + Setup(builder: RenderGraphBuilder): void
        + Execute(context: RenderPassContext): void
        + OnGraphCompiled(renderGraph: RenderGraph): void
        - CreateShaders(renderGraph: RenderGraph): void
        - UpdateColorCorrectionParameters(context: RenderPassContext): void
        - SetupColorCorrectionShaders(commandBuffer: CommandBuffer): void
        + Dispose(): void
    }

    enum BlurDirection {
        Horizontal
        Vertical
        Both
    }

    enum BlurQuality {
        Low
        Medium
        High
    }

    enum ToneMappingType {
        None
        Reinhard
        ACES
        Filmic
        Uncharted2
    }

    class RenderableObject {
        + Visible: bool
        + VertexBuffer: ResourceHandle
        + IndexBuffer: ResourceHandle
        + VertexCount: uint
        + IndexCount: uint
        + InstanceCount: uint
        + VertexStride: uint
        + IndexFormat: IndexFormat
        + Material: Material
        + WorldMatrix: Matrix4x4
    }

    class Material {
        + VertexShader: IShader
        + PixelShader: IShader
        + Textures: List<ResourceHandle>
        + Samplers: List<ISampler>
        + ConstantBuffer: ResourceHandle
        + Name: string
    }

    struct CameraConstants {
        + ViewMatrix: Matrix4x4
        + ProjectionMatrix: Matrix4x4
        + ViewProjectionMatrix: Matrix4x4
        + CameraPosition: Vector4
        + ScreenResolution: Vector4
    }

    struct BlurParameters {
        + BlurRadius: float
        + BlurSigma: float
        + TexelSize: Vector2
        + KernelSize: int
    }

    struct ColorCorrectionParameters {
        + Gamma: float
        + Contrast: float
        + Brightness: float
        + Saturation: float
        + ColorBalance: Vector3
        + Exposure: float
        + EnableToneMapping: int
        + ToneMappingType: int
    }
}

' Render Passes
RenderPass <|-- GeometryPass
RenderPass <|-- BlurPass
RenderPass <|-- ColorCorrectionPass

GeometryPass --> RenderableObject : renders
RenderableObject --> Material : uses
Material --> IShader : uses
Material --> ISampler : uses

BlurPass --> IShader : uses for blur
BlurPass --> ISampler : uses for sampling
ColorCorrectionPass --> IShader : uses for correction
ColorCorrectionPass --> ISampler : uses for sampling

@enduml