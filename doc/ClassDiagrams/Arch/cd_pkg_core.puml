@startuml Core

package "RenderGraph Core" {
    class RenderGraph {
        - _passes: List<RenderPass>
        - _resourceManager: ResourceManager
        - _dependencyResolver: DependencyResolver
        - _device: IGraphicsDevice
        - _builder: RenderGraphBuilder
        - _frameData: FrameData
        - _compiled: bool
        - _executionOrder: List<RenderPass>
        - _passContexts: Dictionary<RenderPass, RenderPassContext>
        --
        + AddPass<T>(pass: T): void
        + RemovePass(pass: RenderPass): void
        + GetPass<T>(): T
        + GetPass(name: string): RenderPass
        + Execute(commandBuffer: CommandBuffer): void
        + Compile(): void
        + Reset(): void
        + ValidateGraph(): bool
        + GetExecutionOrder(): List<RenderPass>
        + UpdateFrameData(deltaTime: float, width: uint, height: uint): void
        + SetViewMatrix(viewMatrix: Matrix4x4): void
        + SetProjectionMatrix(projMatrix: Matrix4x4): void
        + SetCameraPosition(position: Vector3): void
        + ImportTexture(name: string, texture: ITexture): ResourceHandle
        + ImportBuffer(name: string, buffer: IBuffer): ResourceHandle
        + GetNamedResource(name: string): ResourceHandle
        + HasNamedResource(name: string): bool
        + GetMemoryUsage(): MemoryUsageInfo
        + GetStatistics(): RenderGraphStatistics
        + GetGraphicsDevice(): IGraphicsDevice
        + Dispose(): void
    }

    abstract class RenderPass {
        + Name: string
        + Enabled: bool
        + Inputs: IReadOnlyList<ResourceHandle>
        + Outputs: IReadOnlyList<ResourceHandle>
        + Dependencies: IReadOnlyList<RenderPass>
        + ExecutionOrder: int
        + AlwaysExecute: bool
        + Category: PassCategory
        + Priority: PassPriority
        + Statistics: PassStatistics
        --
        + {abstract} Setup(builder: RenderGraphBuilder): void
        + {abstract} Execute(context: RenderPassContext): void
        + CanExecute(): bool
        + Initialize(): void
        + OnGraphCompiled(renderGraph: RenderGraph): void
        + OnFrameBegin(frameData: FrameData): void
        + OnFrameEnd(frameData: FrameData): void
        + GetResourceUsage(): ResourceUsageInfo
        + IsCompatibleWith(otherPass: RenderPass): bool
        + Validate(out errorMessage: string): bool
        + AddDependency(dependency: RenderPass): void
        + RemoveDependency(dependency: RenderPass): void
        + ClearDependencies(): void
        + HasDependency(dependency: RenderPass): bool
        + HasDependencyOn(targetPass: RenderPass): bool
        + Dispose(): void
    }

    class RenderGraphBuilder {
        - _resourceManager: ResourceManager
        - _currentPass: RenderPass
        - _resourceUsages: Dictionary<ResourceHandle, ResourceUsageInfo>
        - _namedResources: Dictionary<string, ResourceHandle>
        - _currentPassUsages: List<ResourceUsageInfo>
        --
        + CreateTexture(name: string, desc: TextureDescription): ResourceHandle
        + CreateBuffer(name: string, desc: BufferDescription): ResourceHandle
        + ReadTexture(handle: ResourceHandle): void
        + WriteTexture(handle: ResourceHandle): void
        + ReadBuffer(handle: ResourceHandle): void
        + WriteBuffer(handle: ResourceHandle): void
        + ReadWriteTexture(handle: ResourceHandle): void
        + ReadWriteBuffer(handle: ResourceHandle): void
        + ReadTextureAsDepth(handle: ResourceHandle): void
        + WriteTextureAsDepth(handle: ResourceHandle): void
        + ReadTextureAsRenderTarget(handle: ResourceHandle): void
        + ImportTexture(name: string, texture: ITexture): ResourceHandle
        + ImportBuffer(name: string, buffer: IBuffer): ResourceHandle
        + SetResourceLifetime(handle: ResourceHandle, lifetime: ResourceLifetime): void
        + GetNamedResource(name: string): ResourceHandle
        + HasNamedResource(name: string): bool
        + GetResourceUsages(): IEnumerable<ResourceUsageInfo>
        + GetResourceUsage(handle: ResourceHandle, passName: string): ResourceUsageInfo?
        + GetResourceDescription(handle: ResourceHandle): ResourceDescription
        + ValidateResourceUsages(): void
        + Clear(): void
    }

    class RenderPassContext {
        + CommandBuffer: CommandBuffer
        + Resources: ResourceManager
        + FrameData: FrameData
        + PassIndex: int
        + ViewportWidth: uint
        + ViewportHeight: uint
        --
        + GetTexture(handle: ResourceHandle): ITexture
        + GetBuffer(handle: ResourceHandle): IBuffer
        + GetTextureView(handle: ResourceHandle, viewType: TextureViewType): ITextureView
        + GetBufferView(handle: ResourceHandle, viewType: BufferViewType): IBufferView
        + SetViewport(x: float, y: float, width: float, height: float, minDepth: float, maxDepth: float): void
        + SetFullScreenViewport(): void
    }

    class ResourceManager {
        - _resources: Dictionary<ResourceHandle, IResource>
        - _resourceDescriptions: Dictionary<ResourceHandle, ResourceDescription>
        - _texturePool: ResourcePool<ITexture>
        - _bufferPool: ResourcePool<IBuffer>
        - _aliasedResources: Dictionary<ResourceHandle, ResourceHandle>
        - _resourceLifetimes: Dictionary<ResourceHandle, ResourceLifetime>
        - _handleGenerator: ResourceHandleGenerator
        - _device: IGraphicsDevice
        --
        + CreateTexture(desc: TextureDescription): ResourceHandle
        + CreateBuffer(desc: BufferDescription): ResourceHandle
        + GetTexture(handle: ResourceHandle): ITexture
        + GetBuffer(handle: ResourceHandle): IBuffer
        + AliasResource(source: ResourceHandle, target: ResourceHandle): void
        + TransitionResource(handle: ResourceHandle, state: ResourceState): void
        + ReleaseResource(handle: ResourceHandle): void
        + GetResourceDescription(handle: ResourceHandle): ResourceDescription
        + OptimizeResourceUsage(): void
        + GetMemoryUsage(): MemoryUsageInfo
        + SetResourceLifetime(handle: ResourceHandle, lifetime: ResourceLifetime): void
        + GetResourceLifetime(handle: ResourceHandle): ResourceLifetime
        + ImportTexture(name: string, texture: ITexture): ResourceHandle
        + ImportBuffer(name: string, buffer: IBuffer): ResourceHandle
        + Dispose(): void
    }

    class DependencyResolver {
        - _passGraph: DirectedGraph<RenderPass>
        - _resourceDependencies: Dictionary<ResourceHandle, List<RenderPass>>
        --
        + AddNode(pass: RenderPass): void
        + AddEdge(from: RenderPass, to: RenderPass): void
        + BuildDependencyGraph(passes: List<RenderPass>): void
        + TopologicalSort(): List<RenderPass>
        + DetectCycles(): List<RenderPass>
        + CullUnusedPasses(): List<RenderPass>
        + ValidateDependencies(): bool
        + GetCriticalPath(): List<RenderPass>
        + Clear(): void
    }

    class FrameData {
        + FrameIndex: ulong
        + DeltaTime: float
        + ViewMatrix: Matrix4x4
        + ProjectionMatrix: Matrix4x4
        + ViewProjectionMatrix: Matrix4x4
        + CameraPosition: Vector3
        + ScreenWidth: uint
        + ScreenHeight: uint
        - _globalConstants: Dictionary<string, object>
        --
        + UpdateMatrices(): void
        + GetConstantBuffer<T>(): T
        + SetConstantBuffer<T>(data: T): void
        + SetGlobalConstant(name: string, value: object): void
        + GetGlobalConstant<T>(name: string): T
        + Reset(): void
    }

    struct ResourceHandle {
        + Id: uint
        + Type: ResourceType
        + Generation: uint
        + Name: string
        --
        + IsValid(): bool
        + Equals(other: ResourceHandle): bool
        + GetHashCode(): int
        + ToString(): string
    }

    class ResourceHandleGenerator {
        - _nextId: uint
        - _generationMap: Dictionary<uint, uint>
        --
        + Generate(type: ResourceType, name: string): ResourceHandle
        + Release(handle: ResourceHandle): void
        + IsHandleValid(handle: ResourceHandle): bool
    }

    class ResourceUsageInfo {
        + Handle: ResourceHandle
        + AccessType: ResourceAccessType
        + Usage: ResourceUsage
        + State: ResourceState
        + PassName: string
        --
        + IsRead(): bool
        + IsWrite(): bool
        + ConflictsWith(other: ResourceUsageInfo): bool
        + ToString(): string
        + Equals(obj: object): bool
        + GetHashCode(): int
    }

    class PassStatistics {
        + LastSetupTime: TimeSpan
        + LastExecutionTime: TimeSpan
        + TotalSetupTime: TimeSpan
        + TotalExecutionTime: TimeSpan
        + SetupCount: int
        + ExecutionCount: int
        + ErrorCount: int
        + WasExecutedThisFrame: bool
        + CurrentFrameNumber: int
        + AverageSetupTime: TimeSpan
        + AverageExecutionTime: TimeSpan
        --
        + StartSetup(): void
        + EndSetup(): void
        + StartExecution(): void
        + EndExecution(): void
        + MarkExecutedThisFrame(): void
        + StartFrame(): void
        + EndFrame(): void
        + RecordError(exception: Exception): void
        + GetErrors(): IReadOnlyList<Exception>
        + GetLastError(): Exception
        + Reset(): void
        + ClearErrors(): void
        + ToString(): string
    }

    enum ResourceType {
        Texture1D
        Texture2D
        Texture3D
        TextureCube
        Texture2DArray
        TextureCubeArray
        Buffer
        StructuredBuffer
        RawBuffer
    }

    enum ResourceAccessType {
        Read
        Write
        ReadWrite
    }

    enum ResourceLifetime {
        Transient
        Persistent
        External
        Imported
    }

    enum PassCategory {
        Initialization
        GeometrySetup
        ShadowMapping
        Rendering
        PostProcessing
        UI
        Debug
        Finalization
    }

    enum PassPriority {
        Lowest
        Low
        Normal
        High
        Highest
        Critical
    }
}

' Core Relationships
RenderGraph *-- RenderPass : manages
RenderGraph *-- ResourceManager : uses
RenderGraph *-- DependencyResolver : uses
RenderGraph *-- RenderGraphBuilder : uses
RenderGraph *-- FrameData : contains
RenderGraph --> IGraphicsDevice : uses

RenderPass ..> RenderGraphBuilder : uses in Setup
RenderPass ..> RenderPassContext : uses in Execute
RenderPass *-- PassStatistics : contains

RenderGraphBuilder --> ResourceManager : manages resources
RenderPassContext --> ResourceManager : accesses resources
RenderPassContext --> CommandBuffer : uses
RenderPassContext --> FrameData : accesses

ResourceManager --> ResourceHandle : creates/manages
ResourceManager --> ResourceHandleGenerator : uses
ResourceManager --> ResourcePool : uses
ResourceManager --> IGraphicsDevice : uses
ResourceManager --> MemoryUsageInfo : provides

DependencyResolver --> DirectedGraph : uses
ResourceUsageInfo --> ResourceHandle : references

@enduml