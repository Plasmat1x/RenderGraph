@startuml Utility

package "Utility Classes" {
    class ResourcePool<T> {
        - _availableResources: Queue<T>
        - _usedResources: HashSet<T>
        - _createFunction: Func<T>
        --
        + Rent(): T
        + Return(item: T): void
        + Clear(): void
        + Defragment(): void
        + GetAvailableResources(): IEnumerable<T>
        + GetUsageStats(): PoolUsageStats
        + Dispose(): void
    }

    struct PoolUsageStats {
        + AvailableCount: int
        + UsedCount: int
        + TotalCount: int
        + UtilizationRate: float
    }

    struct MemoryUsageInfo {
        + TotalAllocated: ulong
        + TotalUsed: ulong
        + TextureMemory: ulong
        + BufferMemory: ulong
        + PeakUsage: ulong
        --
        + GetFragmentation(): float
        + GetUtilization(): float
        + GetTextureMemoryRatio(): float
        + GetBufferMemoryRatio(): float
        + GetFormattedSize(bytes: ulong): string
        + ToString(): string
    }

    struct RenderGraphStatistics {
        + TotalPasses: int
        + EnabledPasses: int
        + DisabledPasses: int
        + TotalResources: int
        + MemoryUsage: MemoryUsageInfo
        + IsCompiled: bool
        + LastFrameIndex: ulong
        + PassUtilization: float
    }

    class DirectedGraph<T> {
        - _nodes: HashSet<T>
        - _edges: Dictionary<T, List<T>>
        - _reverseEdges: Dictionary<T, List<T>>
        --
        + Nodes: IReadOnlyCollection<T>
        + NodeCount: int
        + EdgeCount: int
        + AddNode(node: T): void
        + AddEdge(from: T, to: T): void
        + RemoveNode(node: T): void
        + RemoveEdge(from: T, to: T): void
        + GetTopologicalSort(): List<T>
        + HasCycle(): bool
        + GetDependencies(node: T): List<T>
        + GetDependents(node: T): List<T>
        + Clear(): void
        + ContainsNode(node: T): bool
        + ContainsEdge(from: T, to: T): bool
    }

    struct DeviceCapabilities {
        + MaxTexture1DSize: uint
        + MaxTexture2DSize: uint
        + MaxTexture3DSize: uint
        + MaxTextureCubeSize: uint
        + MaxTextureArrayLayers: uint
        + MaxColorAttachments: uint
        + MaxVertexAttributes: uint
        + MaxVertexBuffers: uint
        + MaxUniformBufferBindings: uint
        + MaxStorageBufferBindings: uint
        + MaxSampledImageBindings: uint
        + MaxStorageImageBindings: uint
        + MaxSamplerBindings: uint
        + MaxComputeWorkGroupSize: uint
        + MaxComputeWorkGroupInvocations: uint
        + SupportedSampleCounts: SampleCountFlags
        + SupportsGeometryShader: bool
        + SupportsTessellation: bool
        + SupportsComputeShader: bool
        + SupportsMultiDrawIndirect: bool
        + SupportsDrawIndirect: bool
        + SupportsDepthClamp: bool
        + SupportsAnisotropicFiltering: bool
        + SupportsTextureCompressionBC: bool
        + SupportsTextureCompressionETC: bool
        + SupportsTextureCompressionASTC: bool
    }

    struct MemoryInfo {
        + TotalMemory: ulong
        + AvailableMemory: ulong
        + UsedMemory: ulong
        + Budget: ulong
        + CurrentUsage: ulong
        + CurrentReservation: ulong
    }

    struct Viewport {
        + X: float
        + Y: float
        + Width: float
        + Height: float
        + MinDepth: float
        + MaxDepth: float
    }

    struct Rectangle {
        + X: int
        + Y: int
        + Width: int
        + Height: int
        + Left: int
        + Top: int
        + Right: int
        + Bottom: int
        + IsEmpty: bool
        + Area: int
        --
        + Contains(x: int, y: int): bool
        + Contains(rect: Rectangle): bool
        + Intersects(rect: Rectangle): bool
        + Intersect(rect: Rectangle): Rectangle
        + Union(rect: Rectangle): Rectangle
        + Equals(obj: object): bool
        + GetHashCode(): int
        + ToString(): string
    }

    struct Vector2 {
        + X: float
        + Y: float
    }

    struct Vector3 {
        + X: float
        + Y: float
        + Z: float
    }

    struct Vector4 {
        + X: float
        + Y: float
        + Z: float
        + W: float
    }

    struct Matrix4x4 {
        + Identity: Matrix4x4
        --
        + Multiply(left: Matrix4x4, right: Matrix4x4): Matrix4x4
    }

    struct Point3D {
        + X: uint
        + Y: uint
        + Z: uint
    }

    struct Box {
        + Left: uint
        + Top: uint
        + Front: uint
        + Right: uint
        + Bottom: uint
        + Back: uint
        + Width: uint
        + Height: uint
        + Depth: uint
    }
}

' Utility Relationships
ResourceManager --> ResourcePool : uses
DirectedGraph <-- DependencyResolver : uses
PassStatistics <-- RenderPass : contains

@enduml