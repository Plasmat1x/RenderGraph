@startuml GraphicsAPIComposition

' Core Interfaces Package
package CoreInterfaces {
    interface IDisposable {
        + Dispose() : void
    }

    interface IGraphicsDevice extends IDisposable {
        ' Factory methods for high-level objects
        + CreateBuffer(desc: BufferDescription) : IBuffer
        + CreateTexture(desc: TextureDescription) : ITexture
        + CreateGraphicsPipeline(desc: GraphicsPipelineDescription) : IPipeline
        + CreateCommandPool(type: CommandListType) : ICommandPool
        ' ... and more
    }

    interface IBuffer extends IDisposable {
        + SizeInBytes : long
        + Usage : BufferUsage
        + UpdateData<T>(data: T[], offset: long) : void
        ' ...
    }

    interface ITexture extends IDisposable {
        + Width : int
        + Height : int
        + Format : Format
        + Usage : TextureUsage
        + MipLevels : int
        + ArrayLayers : int
        + UpdateData(data: byte[], mipLevel: int, arrayLayer: int) : void
        ' ...
    }

    interface IPipeline extends IDisposable {
        + Layout : PipelineLayoutInfo
        ' ...
    }

    interface ICommandList extends IDisposable {
        ' ... command recording methods ...
    }

    interface ICommandPool extends IDisposable {
        + AllocateCommandList() : ICommandList
        + Reset() : void
        ' ...
    }

    ' === Data Structures ===
    class BufferDescription {
        + SizeInBytes : long
        + Usage : BufferUsage
        + MemoryFlags : MemoryPropertyFlags ' e.g., DeviceLocal, HostVisible
    }

    class TextureDescription {
        + Width : int
        + Height : int
        + Format : Format
        + Usage : TextureUsage
        + MipLevels : int
        + ArrayLayers : int
    }

    class GraphicsPipelineDescription {
        + VertexShader : IShaderModule
        + FragmentShader : IShaderModule
        + Layout : PipelineLayoutInfo
        ' ...
    }

    class PipelineLayoutInfo {
        ' Abstraction of root signature / pipeline layout
        ' Contains descriptions of expected resource bindings for shaders
    }

    ' Enums for clarity
    enum BufferUsage 
    { 
        ... 
    }
    enum TextureUsage 
    { 
        ... 
    }
    enum Format 
    { 
        ... 
    }
    enum CommandListType 
    { 
        Graphics
        Compute
        Copy 
    }
    enum MemoryPropertyFlags 
    {
        ... 
    }
}

' API-Specific Implementations Package
package APIImplementations {

    ' DirectX 12 Specific Components
    skinparam packageTitleBackgroundColor LightBlue
    package DirectX12 {
        class ID3D12Device 
        { 

        }
        class ID3D12Resource 
        { 

        }
        class ID3D12CommandList 
        { 

        }
        class ID3D12CommandAllocator 
        { 

        }
        class ID3D12PipelineState 
        { 
        }
        class ID3D12RootSignature 
        { 
        }
        class D3D12_CPU_DESCRIPTOR_HANDLE
        { 
        }
        class D3D12_GPU_DESCRIPTOR_HANDLE
        { 
        }
        class D3D12_DESCRIPTOR_HEAP_DESC
        { 
        }
        class ID3D12DescriptorHeap 
        { 
        }

        ' Managers/Helpers for DX12
        class Dx12DescriptorHeapManager {
            - _nativeHeap : ID3D12DescriptorHeap
            - _cpuStart : D3D12_CPU_DESCRIPTOR_HANDLE
            - _gpuStart : D3D12_GPU_DESCRIPTOR_HANDLE
            + AllocateCpuDescriptor() : D3D12_CPU_DESCRIPTOR_HANDLE
            + GetGpuDescriptorHandle(cpuHandle: D3D12_CPU_DESCRIPTOR_HANDLE) : D3D12_GPU_DESCRIPTOR_HANDLE
            ' ...
        }

        ' High-level DX12 implementations (composite)
        class Dx12GraphicsDevice implements IGraphicsDevice {
            - _device : ID3D12Device
            - _srvUavCbvHeapMgr : Dx12DescriptorHeapManager
            - _rtvHeapMgr : Dx12DescriptorHeapManager
            - _dsvHeapMgr : Dx12DescriptorHeapManager
            ' ...
        }

        class Dx12Buffer implements IBuffer {
            - _nativeResource : ID3D12Resource
            ' If it's a CBV/SRV/UAV buffer, it might have a descriptor handle too
            ' - _cbvSrvUavCpuHandle : D3D12_CPU_DESCRIPTOR_HANDLE
            ' - _cbvSrvUavGpuHandle : D3D12_GPU_DESCRIPTOR_HANDLE
            ' ...
        }

        class Dx12Texture implements ITexture {
            - _nativeResource : ID3D12Resource
            - _srvCpuHandle : D3D12_CPU_DESCRIPTOR_HANDLE
            - _srvGpuHandle : D3D12_GPU_DESCRIPTOR_HANDLE
            - _rtvCpuHandle : D3D12_CPU_DESCRIPTOR_HANDLE
            - _dsvCpuHandle : D3D12_CPU_DESCRIPTOR_HANDLE
            ' ...
        }

        class Dx12Pipeline implements IPipeline {
            - _nativePipelineState : ID3D12PipelineState
            - _nativeRootSignature : ID3D12RootSignature
            ' ...
        }

        class Dx12CommandPool implements ICommandPool {
            - _nativeAllocators : ID3D12CommandAllocator[]
            ' ...
        }

        class Dx12CommandListWrapper implements ICommandList {
            - _nativeList : ID3D12CommandList
            ' ...
        }
    }

    ' Vulkan Specific Components
    skinparam packageTitleBackgroundColor LightGreen
    package Vulkan {
        class VkDevice 
        {

        }
        class VkBuffer 
        { 

        }
        class VkImage 
        { 

        }
        class VkDeviceMemory 
        { 

        }
        class VkImageView 
        { 

        }
        class VkCommandBuffer 
        { 

        }
        class VkCommandPool 
        { 

        }
        class VkPipeline 
        { 
 
        }
        class VkPipelineLayout 
        { 
 
        }
        class VkDescriptorSet 
        { 

        }
        class VkDescriptorSetLayout 
        { 
 
        }
        class VkDescriptorPool 
        { 

        }

        ' Managers/Helpers for Vulkan
        class VulkanMemoryAllocator 
        { 
            + AllocateBuffer(desc, out VkBuffer, out VkDeviceMemory)
            + AllocateImage(desc, out VkImage, out VkDeviceMemory)
        }
        class VulkanDescriptorManager {
            - _descriptorPool : VkDescriptorPool
            + AllocateDescriptorSet(layout: VkDescriptorSetLayout) : VkDescriptorSet
            ' ...
        }

        ' High-level Vulkan implementations (composite)
        class VulkanGraphicsDevice implements IGraphicsDevice {
            - _device : VkDevice
            - _memoryAllocator : VulkanMemoryAllocator
            - _descriptorManager : VulkanDescriptorManager
            ' ...
        }

        class VulkanBuffer implements IBuffer {
            - _nativeBuffer : VkBuffer
            - _nativeMemory : VkDeviceMemory
            ' ...
        }

        class VulkanTexture implements ITexture {
            - _nativeImage : VkImage
            - _nativeMemory : VkDeviceMemory
            - _nativeImageView : VkImageView
            ' ...
        }

        class VulkanPipeline implements IPipeline {
            - _nativePipeline : VkPipeline
            - _nativePipelineLayout : VkPipelineLayout
            ' ...
        }

        class VulkanCommandPool implements ICommandPool {
            - _nativePool : VkCommandPool
            ' ...
        }

        class VulkanCommandListWrapper implements ICommandList {
            - _nativeBuffer : VkCommandBuffer
            ' ...
        }
    }
}

' Relationships

' Core Interfaces implement IDisposable
CoreInterfaces.IGraphicsDevice -up-|> IDisposable
CoreInterfaces.IBuffer -up-|> IDisposable
CoreInterfaces.ITexture -up-|> IDisposable
CoreInterfaces.IPipeline -up-|> IDisposable
CoreInterfaces.ICommandPool -up-|> IDisposable
CoreInterfaces.ICommandList -up-|> IDisposable

' Core Interfaces composition (simplified for diagram clarity)
CoreInterfaces.IGraphicsDevice "1" --> "*" CoreInterfaces.IBuffer : creates
CoreInterfaces.IGraphicsDevice "1" --> "*" CoreInterfaces.ITexture : creates
CoreInterfaces.IGraphicsDevice "1" --> "*" CoreInterfaces.IPipeline : creates
CoreInterfaces.IGraphicsDevice "1" --> "*" CoreInterfaces.ICommandPool : creates

CoreInterfaces.ICommandPool "1" --> "*" CoreInterfaces.ICommandList : allocates

' Implementation relationships
Dx12GraphicsDevice ..|> IGraphicsDevice
VulkanGraphicsDevice ..|> IGraphicsDevice

Dx12Buffer ..|> IBuffer
VulkanBuffer ..|> IBuffer

Dx12Texture ..|> ITexture
VulkanTexture ..|> ITexture

Dx12Pipeline ..|> IPipeline
VulkanPipeline ..|> IPipeline

Dx12CommandPool ..|> ICommandPool
VulkanCommandPool ..|> ICommandPool

Dx12CommandListWrapper ..|> ICommandList
VulkanCommandListWrapper ..|> ICommandList

' Composition within DX12 Implementation
Dx12GraphicsDevice --> ID3D12Device
Dx12GraphicsDevice --> Dx12DescriptorHeapManager : uses

Dx12Buffer "1" --> "1" ID3D12Resource : composes

Dx12Texture "1" --> "1" ID3D12Resource : composes
Dx12Texture "1" --> "Dx12DescriptorHeapManager" : allocates/manages handles from

Dx12Pipeline "1" --> "1" ID3D12PipelineState : composes
Dx12Pipeline "1" --> "1" ID3D12RootSignature : composes

Dx12CommandPool "1" --> "*" ID3D12CommandAllocator : manages

Dx12CommandListWrapper "1" --> "1" ID3D12CommandList : wraps

' Composition within Vulkan Implementation
VulkanGraphicsDevice --> VkDevice
VulkanGraphicsDevice --> VulkanMemoryAllocator : uses
VulkanGraphicsDevice --> VulkanDescriptorManager : uses

VulkanBuffer "1" --> "1" VkBuffer : composes
VulkanBuffer "1" --> "1" VkDeviceMemory : composes (often via VMA)

VulkanTexture "1" --> "1" VkImage : composes
VulkanTexture "1" --> "1" VkDeviceMemory : composes (often via VMA)
VulkanTexture "1" --> "1" VkImageView : composes

VulkanPipeline "1" --> "1" VkPipeline : composes
VulkanPipeline "1" --> "1" VkPipelineLayout : composes

VulkanCommandPool "1" --> "1" VkCommandPool : manages

VulkanCommandListWrapper "1" --> "1" VkCommandBuffer : wraps

@enduml