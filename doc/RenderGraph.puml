@startuml RenderGraphLibrary

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontName Arial
skinparam classFontSize 12

package "RenderGraph Core" {
    class RenderGraph {
        - _passes: List<RenderPass>
        - _resourceManager: ResourceManager
        - _dependencyResolver: DependencyResolver
        - _device: IGraphicsDevice
        - _compiled: bool
        - _frameData: FrameData
        --
        + AddPass<T>(pass: T): void
        + RemovePass(pass: RenderPass): void
        + Execute(commandBuffer: CommandBuffer): void
        + Compile(): void
        + Reset(): void
        + ValidateGraph(): bool
        + GetExecutionOrder(): List<RenderPass>
        + Dispose(): void
    }

    abstract class RenderPass {
        + Name: string
        + Enabled: bool
        + Inputs: List<ResourceHandle>
        + Outputs: List<ResourceHandle>
        + Dependencies: List<RenderPass>
        + ExecutionOrder: int
        --
        + {abstract} Setup(builder: RenderGraphBuilder): void
        + {abstract} Execute(context: RenderPassContext): void
        + AddDependency(pass: RenderPass): void
        + RemoveDependency(pass: RenderPass): void
        + CanExecute(): bool
        + GetResourceUsage(): ResourceUsageInfo
    }

    class RenderGraphBuilder {
        - _resourceManager: ResourceManager
        - _currentPass: RenderPass
        - _resourceUsages: Dictionary<ResourceHandle, ResourceUsageInfo>
        --
        + CreateTexture(name: string, desc: TextureDescription): ResourceHandle
        + CreateBuffer(name: string, desc: BufferDescription): ResourceHandle
        + ReadTexture(handle: ResourceHandle): void
        + WriteTexture(handle: ResourceHandle): void
        + ReadBuffer(handle: ResourceHandle): void
        + WriteBuffer(handle: ResourceHandle): void
        + ImportTexture(name: string, texture: ITexture): ResourceHandle
        + ImportBuffer(name: string, buffer: IBuffer): ResourceHandle
        + SetResourceLifetime(handle: ResourceHandle, lifetime: ResourceLifetime): void
    }

    class RenderPassContext {
        + CommandBuffer: CommandBuffer
        + Resources: ResourceManager
        + FrameData: FrameData
        + PassIndex: int
        + ViewportWidth: uint
        + ViewportHeight: uint
        --
        + GetTexture(handle: ResourceHandle): ITexture
        + GetBuffer(handle: ResourceHandle): IBuffer
        + GetTextureView(handle: ResourceHandle, viewType: TextureViewType): ITextureView
        + GetBufferView(handle: ResourceHandle, viewType: BufferViewType): IBufferView
    }

    class ResourceManager {
        - _resources: Dictionary<ResourceHandle, IResource>
        - _resourceDescriptions: Dictionary<ResourceHandle, ResourceDescription>
        - _texturePool: ResourcePool<ITexture>
        - _bufferPool: ResourcePool<IBuffer>
        - _aliasedResources: Dictionary<ResourceHandle, ResourceHandle>
        - _resourceLifetimes: Dictionary<ResourceHandle, ResourceLifetime>
        --
        + CreateTexture(desc: TextureDescription): ResourceHandle
        + CreateBuffer(desc: BufferDescription): ResourceHandle
        + GetTexture(handle: ResourceHandle): ITexture
        + GetBuffer(handle: ResourceHandle): IBuffer
        + AliasResource(source: ResourceHandle, target: ResourceHandle): void
        + TransitionResource(handle: ResourceHandle, state: ResourceState): void
        + ReleaseResource(handle: ResourceHandle): void
        + GetResourceDescription(handle: ResourceHandle): ResourceDescription
        + OptimizeResourceUsage(): void
        + GetMemoryUsage(): MemoryUsageInfo
    }

    class DependencyResolver {
        - _passGraph: DirectedGraph<RenderPass>
        - _resourceDependencies: Dictionary<ResourceHandle, List<RenderPass>>
        --
        + BuildDependencyGraph(passes: List<RenderPass>): void
        + TopologicalSort(): List<RenderPass>
        + DetectCycles(): List<RenderPass>
        + CullUnusedPasses(): List<RenderPass>
        + ValidateDependencies(): bool
        + GetCriticalPath(): List<RenderPass>
    }

    class FrameData {
        + FrameIndex: ulong
        + DeltaTime: float
        + ViewMatrix: Matrix4x4
        + ProjectionMatrix: Matrix4x4
        + ViewProjectionMatrix: Matrix4x4
        + CameraPosition: Vector3
        + ScreenWidth: uint
        + ScreenHeight: uint
        + GlobalConstants: Dictionary<string, object>
        --
        + GetConstantBuffer<T>(): T
        + SetConstantBuffer<T>(data: T): void
        + UpdateMatrices(): void
    }

    struct ResourceHandle {
        + Id: uint
        + Type: ResourceType
        + Generation: uint
        + Name: string
        --
        + IsValid(): bool
        + Equals(other: ResourceHandle): bool
        + GetHashCode(): int
        + ToString(): string
    }

    class ResourceUsageInfo {
        + Handle: ResourceHandle
        + AccessType: ResourceAccessType
        + Usage: ResourceUsage
        + State: ResourceState
        + PassName: string
        --
        + IsRead(): bool
        + IsWrite(): bool
        + ConflictsWith(other: ResourceUsageInfo): bool
    }

    enum ResourceType {
        Texture1D
        Texture2D
        Texture3D
        TextureCube
        Texture2DArray
        TextureCubeArray
        Buffer
        StructuredBuffer
        RawBuffer
    }

    enum ResourceAccessType {
        Read
        Write
        ReadWrite
    }



    enum ResourceLifetime {
        Transient
        Persistent
        External
        Imported
    }
}

package "Resource Descriptions" {
    abstract class ResourceDescription {
        + Name: string
        + Usage: ResourceUsage
        + BindFlags: BindFlags
        + CPUAccessFlags: CPUAccessFlags
        + MiscFlags: ResourceMiscFlags
        --
        + GetMemorySize(): ulong
        + IsCompatible(other: ResourceDescription): bool
    }

    class TextureDescription {
        + Width: uint
        + Height: uint
        + Depth: uint
        + MipLevels: uint
        + ArraySize: uint
        + Format: TextureFormat
        + SampleCount: uint
        + SampleQuality: uint
        + Usage: TextureUsage
        --
        + GetMemorySize(): ulong
        + IsCompatible(other: TextureDescription): bool
        + CreateMipChain(): List<TextureDescription>
    }

    class BufferDescription {
        + Size: ulong
        + Stride: uint
        + Usage: BufferUsage
        + ElementCount: uint
        + StructureByteStride: uint
        --
        + GetMemorySize(): ulong
        + IsCompatible(other: BufferDescription): bool
        + IsStructured(): bool
    }

    enum TextureUsage {
        RenderTarget
        DepthStencil
        ShaderResource
        UnorderedAccess
        BackBuffer
        Staging
        ResolveTarget
        ResolveSource
        CubeMap
        VolumeTexture
    }

    enum BufferUsage {
        Vertex
        Index
        Constant
        Structured
        Raw
        IndirectArgs
        Counter
        Append
        Consume
        Staging
        Upload
        Readback
    }

    enum TextureFormat {
        Unknown
        R32G32B32A32_TYPELESS
        R32G32B32A32_FLOAT
        R32G32B32A32_UINT
        R32G32B32A32_SINT
        R32G32B32_TYPELESS
        R32G32B32_FLOAT
        R32G32B32_UINT
        R32G32B32_SINT
        R16G16B16A16_TYPELESS
        R16G16B16A16_FLOAT
        R16G16B16A16_UNORM
        R16G16B16A16_UINT
        R16G16B16A16_SNORM
        R16G16B16A16_SINT
        R32G32_TYPELESS
        R32G32_FLOAT
        R32G32_UINT
        R32G32_SINT
        R10G10B10A2_TYPELESS
        R10G10B10A2_UNORM
        R10G10B10A2_UINT
        R11G11B10_FLOAT
        R8G8B8A8_TYPELESS
        R8G8B8A8_UNORM
        R8G8B8A8_UNORM_SRGB
        R8G8B8A8_UINT
        R8G8B8A8_SNORM
        R8G8B8A8_SINT
        R16G16_TYPELESS
        R16G16_FLOAT
        R16G16_UNORM
        R16G16_UINT
        R16G16_SNORM
        R16G16_SINT
        R32_TYPELESS
        D32_FLOAT
        R32_FLOAT
        R32_UINT
        R32_SINT
        R24G8_TYPELESS
        D24_UNORM_S8_UINT
        R24_UNORM_X8_TYPELESS
        X24_TYPELESS_G8_UINT
        R8G8_TYPELESS
        R8G8_UNORM
        R8G8_UINT
        R8G8_SNORM
        R8G8_SINT
        R16_TYPELESS
        R16_FLOAT
        D16_UNORM
        R16_UNORM
        R16_UINT
        R16_SNORM
        R16_SINT
        R8_TYPELESS
        R8_UNORM
        R8_UINT
        R8_SNORM
        R8_SINT
        A8_UNORM
        BC1_TYPELESS
        BC1_UNORM
        BC1_UNORM_SRGB
        BC2_TYPELESS
        BC2_UNORM
        BC2_UNORM_SRGB
        BC3_TYPELESS
        BC3_UNORM
        BC3_UNORM_SRGB
        BC4_TYPELESS
        BC4_UNORM
        BC4_SNORM
        BC5_TYPELESS
        BC5_UNORM
        BC5_SNORM
        BC6H_TYPELESS
        BC6H_UF16
        BC6H_SF16
        BC7_TYPELESS
        BC7_UNORM
        BC7_UNORM_SRGB
    }

    enum BindFlags {
        None
        VertexBuffer
        IndexBuffer
        ConstantBuffer
        ShaderResource
        StreamOutput
        RenderTarget
        DepthStencil
        UnorderedAccess
        Decoder
        VideoEncoder
    }

    enum CPUAccessFlags {
        None
        Write
        Read
        ReadWrite
    }

    enum ResourceUsage {
        Default
        Immutable
        Dynamic
        Staging
    }

    enum ResourceMiscFlags {
        None
        GenerateMips
        Shared
        TextureCube
        DrawIndirectArgs
        BufferAllowRawViews
        BufferStructured
        ResourceClamp
        SharedKeyedMutex
        GDICompatible
    }

    enum TextureViewType {
        ShaderResource
        RenderTarget
        DepthStencil
        UnorderedAccess
    }

    enum BufferViewType {
        ShaderResource
        UnorderedAccess
        VertexBuffer
        IndexBuffer
        ConstantBuffer
    }
}

package "GraphicsAPI Abstraction" {
    interface IGraphicsDevice {
        + CreateTexture(desc: TextureDescription): ITexture
        + CreateBuffer(desc: BufferDescription): IBuffer
        + CreateCommandBuffer(): CommandBuffer
        + ExecuteCommandBuffer(commandBuffer: CommandBuffer): void
        + WaitForGPU(): void
        + GetMemoryInfo(): MemoryInfo
        + Dispose(): void
    }

    interface ITexture {
        + Description: TextureDescription
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }

    interface IBuffer {
        + Description: BufferDescription
        + Map(): IntPtr
        + Unmap(): void
        + GetNativeHandle(): IntPtr
        + Dispose(): void
    }

    abstract class CommandBuffer {
        + IsRecording: bool
        --
        + Begin(): void
        + End(): void
        + TransitionResource(resource: IResource, state: ResourceState): void
        + Dispose(): void
    }

    enum ResourceState {
        Undefined
        Common
        RenderTarget
        UnorderedAccess
        DepthWrite
        DepthRead
        ShaderResource
        StreamOut
        IndirectArgument
        CopyDestination
        CopySource
        ResolveDestination
        ResolveSource
        Present
    }
}

package "Render Passes" {
    class GeometryPass {
        + ColorTarget: ResourceHandle
        + DepthTarget: ResourceHandle
        + ViewportWidth: uint
        + ViewportHeight: uint
        --
        + Setup(builder: RenderGraphBuilder): void
        + Execute(context: RenderPassContext): void
    }

    class BlurPass {
        + InputTexture: ResourceHandle
        + OutputTexture: ResourceHandle
        + BlurRadius: float
        + BlurSigma: float
        + BlurDirection: BlurDirection
        --
        + Setup(builder: RenderGraphBuilder): void
        + Execute(context: RenderPassContext): void
    }

    class ColorCorrectionPass {
        + InputTexture: ResourceHandle
        + OutputTexture: ResourceHandle
        + Gamma: float
        + Contrast: float
        + Brightness: float
        + Saturation: float
        --
        + Setup(builder: RenderGraphBuilder): void
        + Execute(context: RenderPassContext): void
    }

    enum BlurDirection {
        Horizontal
        Vertical
        Both
    }
}

package "Utility Classes" {
    class ResourcePool<T> {
        - _availableResources: Queue<T>
        - _usedResources: HashSet<T>
        - _createFunction: Func<T>
        --
        + Rent(): T
        + Return(item: T): void
        + Clear(): void
        + GetUsageStats(): PoolUsageStats
    }

    class MemoryUsageInfo {
        + TotalAllocated: ulong
        + TotalUsed: ulong
        + TextureMemory: ulong
        + BufferMemory: ulong
        + PeakUsage: ulong
        --
        + GetFragmentation(): float
        + GetUtilization(): float
    }

    class DirectedGraph<T> {
        - _nodes: HashSet<T>
        - _edges: Dictionary<T, List<T>>
        --
        + AddNode(node: T): void
        + AddEdge(from: T, to: T): void
        + RemoveNode(node: T): void
        + RemoveEdge(from: T, to: T): void
        + GetTopologicalSort(): List<T>
        + HasCycle(): bool
        + GetDependencies(node: T): List<T>
    }
}

' Core Relationships
RenderGraph *-- RenderPass : manages
RenderGraph *-- ResourceManager : uses
RenderGraph *-- DependencyResolver : uses
RenderGraph *-- FrameData : contains
RenderPass ..> RenderGraphBuilder : uses in Setup
RenderPass ..> RenderPassContext : uses in Execute
RenderGraphBuilder --> ResourceManager : manages resources
RenderPassContext --> ResourceManager : accesses resources
ResourceManager --> ResourceHandle : creates/manages
ResourceManager --> ResourcePool : uses
DependencyResolver --> DirectedGraph : uses
ResourceManager --> MemoryUsageInfo : provides

' Resource Descriptions
ResourceDescription <|-- TextureDescription
ResourceDescription <|-- BufferDescription
ResourceUsageInfo --> ResourceHandle : references

' Graphics API
IGraphicsDevice --> ITexture : creates
IGraphicsDevice --> IBuffer : creates
IGraphicsDevice --> CommandBuffer : creates
ResourceManager --> IGraphicsDevice : uses

' Render Passes
RenderPass <|-- GeometryPass
RenderPass <|-- BlurPass
RenderPass <|-- ColorCorrectionPass

@enduml